<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Carlos Angulo Cheatsheets</title>
        <link>https://cangulo.github.io/cheatsheets</link>
        <description>Here you can find useful cheatsheets about how to do the daily operations a developer does</description>
        <lastBuildDate>Mon, 18 Apr 2022 21:53:14 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Terraform Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/terraform</link>
            <guid>terraform</guid>
            <pubDate>Mon, 18 Apr 2022 21:53:14 GMT</pubDate>
            <description><![CDATA[This post explains the next topics:]]></description>
            <content:encoded><![CDATA[<p>This post explains the next topics:</p><ul><li>How to set up a shortcut for Terraform in the Terminal</li><li>The Terraform commands I use the most</li></ul><h2>Create an alias for TF in your Terminal</h2><p>Please add the next code to your profile depending if you are using PowerShell or bash:</p><div><div><div value="ps" label="PowerShell" default=""><pre><code class="language-powershell">New-Alias -Name tf -Value terraform -Force
function tffmt { tf fmt -recursive }
function tfa { tf apply -auto-approve }
function tfd { tf destroy -auto-approve }
</code></pre></div><div value="sh" label="Bash"><pre><code class="language-bash">alias tf=terraform
alias tffmt=&quot;tf fmt -recursive&quot;
alias tfa=&quot;tf apply -auto-approve&quot;
alias tfd=&quot;tf destroy -auto-approve&quot;
</code></pre></div></div></div><h2>TF Commands</h2><table><thead><tr><th>Command</th></tr></thead><tbody><tr><td><code>tf init</code></td></tr><tr><td><code>tf fmt --recursive</code></td></tr><tr><td><code>tf plan -out plan.out</code></td></tr><tr><td><code>tf apply -auto-approve </code></td></tr><tr><td><code>tf destroy -auto-approve</code></td></tr><tr><td><code>tf state ls</code></td></tr><tr><td><code>tf state rm ADDR</code></td></tr><tr><td><code>tf import -var-file=[FILENAME].tfvars ADDR ID </code></td></tr></tbody></table><h3>Examples</h3><h4>TF IMPORT</h4><p><code>terraform [global options] import [options] ADDR ID</code> -&gt; Is the resource path as <code>RESOURCE_TYPE.RESOURCE_NAME</code>. Examples:</p><pre><code class="language-bash">aws_resourcegroups_group.main
aws_organizations_organizational_unit.apps[&quot;journalbot&quot;] -&gt; Resources created without foreach.
module.app_envs[&quot;temp-app-envs&quot;].aws_organizations_organizational_unit.envs[&quot;prd&quot;] -&gt; Resources created **with foreach**.
</code></pre><p>Using the ADDR in tf import:</p><pre><code class="language-bash">tf import -var-file=base.tfvars RESOURCE_TYPE.RESOURCE_NAME ID_OR_ARN # Resources created without foreach.
tf import -var-file=base.tfvars &#x27;RESOURCE_TYPE.RESOURCE_NAME[&quot;RESOURCE_KEY&quot;]&#x27; ID_OR_ARN #  Resources created **with foreach**. Please note the `&#x27;&#x27;` for the resource path.
</code></pre><h2>References</h2><ul><li><a href="https://dzone.com/articles/terraform-cli-cheat-sheet">TF Cheatsheet</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Git Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/git</link>
            <guid>git</guid>
            <pubDate>Mon, 18 Apr 2022 21:53:14 GMT</pubDate>
            <description><![CDATA[This post explains the next topics:]]></description>
            <content:encoded><![CDATA[<p>This post explains the next topics:</p><ul><li>the git commands I use the most</li><li>some git <em>alias</em> to avoid typing long commandsüòÅüëå</li></ul><h2>Git Commands</h2><h3>Git Checkout</h3><p><code>git checkout --track origin/NAME</code>      </p><ul><li>Create a local branch that tracks the remote one                                                                                                                                                                                    </li></ul><p><code>git checkout -</code>                        </p><ul><li>Checkout the previous branch, this can be useful if you go from your feature branch to dev, you update it, and you want to come back to your feature branch to rebase dev                                                           </li></ul><p><code>git checkout tags/&lt;tag&gt; -b &lt;branch&gt;</code>   </p><ul><li>Checkout a branch starting from the tag provided                                                                                                                                                                                    </li></ul><p><code>git switch</code>                            </p><ul><li>New git command to change between branches to avoid using checkout. Currently is in status experimental. </li><li>Check this <a href="https://git-scm.com/docs/git-switch/2.23.0">link</a> and this <a href="https://bluecast.tech/blog/git-switch-branch/">one</a></li></ul><h3>Git Branch</h3><p><code>git branch --list [&lt;pattern&gt;]</code>         </p><ul><li>List all the branches that match the <code>&lt;pattern&gt;</code>. e.g. <code>*-1234</code> list all the branches that end <code>1234</code>                                                                                                                               </li></ul><h3>Gitk</h3><p><code>gitk</code>                                  </p><ul><li>Check Last commits using a GUI                                                                                                                                                                                                      </li></ul><p><code>gitk &lt;filePath&gt;</code>                       </p><ul><li>Check <code>&lt;filePath&gt;</code> last commits using a GUI                                                                                                                                                                                         </li></ul><h3>Git Cherry Pick</h3><p><code>git cherry-pick -n &lt;commit&gt;</code>           </p><ul><li>Let&#x27;s you inspect the files modified in the commit before cherry-pick them. <a href="https://stackoverflow.com/questions/5717026/how-to-git-cherry-pick-only-changes-to-certain-files">Reference</a>                                           </li></ul><h3>Git diff</h3><p><code>git diff [target-branch] -name-status</code> </p><ul><li>List the files modified and what kind of modification (Added, Deleted, Modified) in your branch using the target branch as reference                                                                                                </li></ul><p><code>git diff [target-branch] -name-only</code>   </p><ul><li>List the files modified in your branch using the target branch as reference                                                                                                                                                         </li></ul><h3>Git rebase</h3><p><code>git rebase -i --root</code></p><ul><li>DO IT UNDER YOUR RISK. Do a git rebase since the first commit. </li><li><a href="https://stackoverflow.com/questions/22992543/how-do-i-git-rebase-the-first-commit/23000315">https://stackoverflow.com/questions/22992543/how-do-i-git-rebase-the-first-commit/23000315</a></li></ul><h2>How to configure an Alias</h2><h3>Using Command Line</h3><table><thead><tr><th>Command</th><th>Example</th></tr></thead><tbody><tr><td><code>git config --global alias.[AliasName] [AliasValue]</code></td><td><code>git config --global alias.co checkout</code></td></tr></tbody></table><h3>Editing the git config file</h3><ol><li>Open your <code>.gitconfig</code> file, it is located in your home folder</li><li>In a new line, add the tag <code>[alias]</code></li><li>In the next lines add your alias following the format <code>[TAB space]AliasName = AliasValue</code>.</li></ol><p>Please note this config file is space/tab sensitive so be sure no spaces are added at the end of each line</p><pre><code class="language-bash">[alias]
    b = branch
</code></pre><p>Next are my personal alias:</p><h2>Alias configured</h2><pre><code class="language-bash">[alias]
  b = branch
  bl = branch --list
  bd = branch -D
  co = checkout
  cob = checkout -b
  cor = checkout --track
  cp = cherry-pick
  cp-c = cherry-pick --continue
  cp-a = cherry-pick --abort
  re = rebase -i
  re-c = rebase --continue
  re-a = rebase --abort
  re-m = rebase -i --rebase-merges
  pushf = push --force
  st = status
  l = &quot;!f() { git log --oneline -n ${1-15}; }; f&quot;
  lg = &quot;!f() { git log --oneline --grep=${1-NoArgumentProvided}; }; f&quot;
  pushr = &quot;!f() { currentBranch=$(git branch --show-current);git push --set-upstream origin $currentBranch; }; f&quot;
  settings = config --global --edit
</code></pre><div label="Check the file here" link="cheatsheets/git/git-alias"></div><p>The one I use the most is <code>cob</code>, every time I have to create a new branch I type <code>git cob [BRANCH_NAME]</code>. Also the rebase one, <code>git re develop</code> , that is how I update my branch with the last changes from develop.</p><p>Please note the <code>l</code> and <code>lg</code> are alias defined as Bash functions with input parameters <code>${1-DefaultParameter}</code>.</p><h2>How to update the permissions for bash files in a git repository</h2><p><code>git update-index --chmod=+x path/to/file</code></p><pre><code class="language-powershell">$bashScripts= Get-ChildItem -Name -Filter &quot;*.sh&quot; -Depth 5
foreach ($script in $bashScripts) {
    git update-index --chmod=+x $script
}
</code></pre><h2>References</h2><ul><li><a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases">official docs - git alias</a></li><li><a href="https://opensource.com/article/20/11/git-aliases">8 Git aliases that make me more efficient</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[WSL Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/wsl</link>
            <guid>wsl</guid>
            <pubDate>Mon, 18 Apr 2022 21:53:14 GMT</pubDate>
            <description><![CDATA[This post explains the next topics:]]></description>
            <content:encoded><![CDATA[<p>This post explains the next topics:</p><ul><li>some tips when using the WSL (Windows Subsystem for Linux)</li></ul><h2>Format bash scripts for been used in Ubuntu</h2><h3>User Case</h3><p>Let&#x27;s say you are using Windows but you have some bash scripts for a Pipeline (Bitbucket or GH Action) you need to modify, if you install Ubuntu in the WSL you can call and tests those scripts. The only problems is that sometimes there is a formatting issue when Ubuntu tries to read them, the next code fix it:</p><p><code>sed -i &#x27;s/\r//&#x27; scripts/*.sh</code>          ;`</p><pre><code class="language-bash">bashScripts=$(find ./ -type f -name &quot;*.sh&quot;) ;\
for script in &quot;${bashScripts[@]}&quot;; do  \
    sed -i &#x27;s/\r//&#x27; $script; \
done
</code></pre><h2>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/">Windows Subsystem for Linux Documentation - Microsoft</a></li></ul>]]></content:encoded>
        </item>
    </channel>
</rss>