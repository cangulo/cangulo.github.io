<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Carlos Angulo Blog</title>
        <link>https://cangulo.github.io/cheatsheets</link>
        <description>Carlos Angulo Blog</description>
        <lastBuildDate>Thu, 04 Nov 2021 23:37:50 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Git Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/git</link>
            <guid>git</guid>
            <pubDate>Thu, 04 Nov 2021 23:37:50 GMT</pubDate>
            <description><![CDATA[This post explains the next topics:]]></description>
            <content:encoded><![CDATA[<p>This post explains the next topics:</p><ul><li>git commands</li><li>git alias -&gt; avoid typing long commandsüòÅüëå</li></ul><h2>Git Commands</h2><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>git checkout --track origin/NAME</code></td><td align="left">Create a local branch that tracks the remote one</td></tr><tr><td align="left"><code>git checkout -</code></td><td align="left">Checkout the previous branch, this can be useful if you go from your feature branch to dev, you update it, and you want to come back to your feature branch to rebase dev</td></tr><tr><td align="left"><code>git branch --list [&lt;pattern&gt;]</code></td><td align="left">List all the branches that match the <code>&lt;pattern&gt;</code>. e.g. <code>*-1234</code> list all the branches that end <code>1234</code></td></tr><tr><td align="left"><code>gitk</code></td><td align="left">Check Last commits using a GUI</td></tr><tr><td align="left"><code>gitk &lt;filePath&gt;</code></td><td align="left">Check <code>&lt;fielPath&gt;</code> last commits using a GUI</td></tr><tr><td align="left"><code>git gui blame &lt;filePath&gt;</code></td><td align="left">Check <code>&lt;fielPath&gt;</code> last commits using a GUI</td></tr><tr><td align="left"><code>gitk</code></td><td align="left">Check Last commits using a GUI</td></tr><tr><td align="left"><code>git switch</code></td><td align="left">New git command to change between branches to avoid using checkout. Currently is in status experimental. Check this <a href="https://git-scm.com/docs/git-switch/2.23.0">link</a> and this <a href="https://bluecast.tech/blog/git-switch-branch/">one</a></td></tr><tr><td align="left"><code>git cherry-pick -n &lt;commit&gt;</code></td><td align="left">Let&#x27;s you inspect the files modified in the commit before cherry pick them. <a href="https://stackoverflow.com/questions/5717026/how-to-git-cherry-pick-only-changes-to-certain-files">Reference</a></td></tr><tr><td align="left"><code>git diff [target-branch] -name-status</code></td><td align="left">List the files modified and what kind of modification (Added, Deleted, Modified) in your branch using the target branch as reference</td></tr><tr><td align="left"><code>git diff [target-branch] -name-only</code></td><td align="left">List the files modified in your branch using the target branch as reference</td></tr><tr><td align="left"><code>git checkout tags/&lt;tag&gt; -b &lt;branch&gt;</code></td><td align="left">Checkout a branch starting from the tag provided</td></tr></tbody></table><h2>How to configure an Alias</h2><h3>Using Command Line</h3><p>using Command line: </p><table><thead><tr><th>Command</th><th>Example</th></tr></thead><tbody><tr><td><code>git config --global alias.[AliasName] [AliasValue]</code></td><td><code>git config --global alias.co checkout</code></td></tr></tbody></table><h3>Editing the git config file</h3><ol><li>Open your <code>.gitconfig</code> file, it is located at your home folder</li><li>In a new line, add the tag <code>[alias]</code></li><li>In the next lines add your alias following the format <code>[TAB space]AliasName = AliasValue</code>.</li></ol><p>Please note this config file is space/tab sensitive so be sure no spaces are added at the end of each line</p><pre><code class="language-bash">[alias]
    b = branch
</code></pre><p>Next are my personal alias:</p><h2>Alias configured</h2><pre><code class="language-bash">[alias]
  b = branch
  bl = branch --list
  bd = branch -D
  co = checkout
  cob = checkout -b
  cor = checkout --track
  cp = cherry-pick
  cp-c = cherry-pick --continue
  cp-a = cherry-pick --abort
  re = rebase -i
  re-c = rebase --continue
  re-a = rebase --abort
  re-m = rebase -i --rebase-merges
  pushf = push --force
  st = status
  l = &quot;!f() { git log --oneline -n ${1-15}; }; f&quot;
  lg = &quot;!f() { git log --oneline --grep=${1-NoArgumentProvided}; }; f&quot;
  pushr = &quot;!f() { currentBranch=$(git branch --show-current);git push --set-upstream origin $currentBranch; }; f&quot;
  settings = config --global --edit
</code></pre><div label="Check the file here" relativeLink="cheatsheets/git/git-alias"></div><p>The one I use the most is <code>cob</code>, every time I have to create a new branch I type <code>git cob [BRANCH_NAME]</code>. Also the rebase one, <code>git re develop</code> , that is how I update my branch with the last changes from develop.</p><p>Please note the <code>l</code> and <code>lg</code> are alias defined as Bash functions with input parameters <code>${1-DefaultParameter}</code>.</p><h2>References</h2><ul><li><a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases">official docs - git alias</a></li><li><a href="https://opensource.com/article/20/11/git-aliases">8 Git aliases that make me more efficient</a></li></ul><div></div><h2>Did you like it? Share it</h2><div slug="cheatsheets/git" title="Git Cheatsheet" tags="git,githooks,alias"></div><div slug="cheatsheets/git"></div>]]></content:encoded>
        </item>
    </channel>
</rss>