<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Carlos Angulo Cheatsheets</title>
        <link>https://cangulo.github.io/cheatsheets</link>
        <description>Here you can find useful cheatsheets about how to do the daily operations a developer does</description>
        <lastBuildDate>Wed, 06 Dec 2023 11:48:59 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Vivaldi Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/vivaldi</link>
            <guid>vivaldi</guid>
            <pubDate>Wed, 06 Dec 2023 11:48:59 GMT</pubDate>
            <description><![CDATA[This post explains the next topics:]]></description>
            <content:encoded><![CDATA[<p>This post explains the next topics:</p><ul><li>some tips for using <a href="https://vivaldi.com">Vivalid Web Browser</a> as creating macros, bookmarklets and shortcuts</li></ul><h2>How to create a bookmarklets that copy JIRA tickets from the url</h2><p>target JIRA urls: <a href="https://cangulo.atlassian.net/browse/BLOG-8">https://cangulo.atlassian.net/browse/BLOG-8</a></p><ol><li>Go to bookmarks</li><li>Create a new one</li><li>In the url part, <strong>paste but do not save</strong> the next code</li></ol><pre><code class="language-javascript">javascript:(function() {
  var url = window.location.href;
  var pattern = /\/browse\/([^\/]+)/;
  var match = pattern.exec(url);
  var key = match ? match[1] : null;
  if (key) {
    var tempInput = document.createElement(&#x27;input&#x27;);
    document.body.appendChild(tempInput);
    tempInput.value = key;
    tempInput.select();
    document.execCommand(&#x27;copy&#x27;);
    document.body.removeChild(tempInput);
    alert(&#x27;Key copied: &#x27; + key);
    location.reload();
  } else {
    alert(&#x27;No key found in the URL.&#x27;);
    location.reload();
  }
})();
</code></pre><blockquote><p>Code generate using ChatGPT. Request: give me a  Bookmarklets for Vivaldi Web Browser which copy current url</p></blockquote><ol start="4"><li>Navigate to the begining, the <code>javascript</code> part was deleted, type a space and rewrite <code>javascript</code></li></ol><p><img src="added-bookmark.gif" alt="added-bookmark"/></p><ol start="5"><li>add a nickname so it is easy to call, in my case ccu (copy current url)</li><li>Test it</li></ol><p><img src="test-bookmarklets.gif" alt="test-bookmarklets.gif"/></p><h2>References</h2><ul><li><a href="https://forum.vivaldi.net/topic/84388/strange-behavior-for-bookmarklets">Strange behavior for bookmarklets</a></li><li><a href="https://forum.vivaldi.net/topic/54337/guide-useful-bookmarklets">Guide | Useful Bookmarklets</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[WSL Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/wsl</link>
            <guid>wsl</guid>
            <pubDate>Wed, 06 Dec 2023 11:48:59 GMT</pubDate>
            <description><![CDATA[This post explains the next topics:]]></description>
            <content:encoded><![CDATA[<p>This post explains the next topics:</p><ul><li>some tips when using the WSL (Windows Subsystem for Linux)</li></ul><h2>Format bash scripts for been used in Ubuntu</h2><h3>User Case</h3><p>Let&#x27;s say you are using Windows but you have some bash scripts for a Pipeline (Bitbucket or GH Action) you need to modify, if you install Ubuntu in the WSL you can call and tests those scripts. The only problems is that sometimes there is a formatting issue when Ubuntu tries to read them, the next code fix it:</p><p><code>sed -i &#x27;s/\r//&#x27; scripts/*.sh</code>          ;`</p><pre><code class="language-bash">bashScripts=$(find ./ -type f -name &quot;*.sh&quot;) ;\
for script in &quot;${bashScripts[@]}&quot;; do  \
    sed -i &#x27;s/\r//&#x27; $script; \
done
</code></pre><h2>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/">Windows Subsystem for Linux Documentation - Microsoft</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Terraform Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/terraform</link>
            <guid>terraform</guid>
            <pubDate>Wed, 06 Dec 2023 11:48:59 GMT</pubDate>
            <description><![CDATA[This post explains the next topics:]]></description>
            <content:encoded><![CDATA[<p>This post explains the next topics:</p><ul><li>How to set up a shortcut for Terraform in the Terminal</li><li>The Terraform commands I use the most</li></ul><h2>Create an alias for TF in your Terminal</h2><p>Please add the next code to your profile depending if you are using PowerShell or bash:</p><div><div><div value="ps" label="PowerShell" default=""><pre><code class="language-powershell">New-Alias -Name tf -Value terraform -Force
function tffmt { tf fmt -recursive }
function tfa { tf apply -auto-approve }
function tfd { tf destroy -auto-approve }
</code></pre></div><div value="sh" label="Bash"><pre><code class="language-bash">alias tf=terraform
alias tffmt=&quot;tf fmt -recursive&quot;
alias tfa=&quot;tf apply -auto-approve&quot;
alias tfd=&quot;tf destroy -auto-approve&quot;
</code></pre></div></div></div><h2>TF Commands</h2><table><thead><tr><th>Command</th></tr></thead><tbody><tr><td><code>tf init</code></td></tr><tr><td><code>tf fmt --recursive</code></td></tr><tr><td><code>tf plan -out plan.out</code></td></tr><tr><td><code>tf apply -auto-approve </code></td></tr><tr><td><code>tf destroy -auto-approve</code></td></tr><tr><td><code>tf state ls</code></td></tr><tr><td><code>tf state rm ADDR</code></td></tr><tr><td><code>tf import -var-file=[FILENAME].tfvars ADDR ID </code></td></tr></tbody></table><h3>Examples</h3><h4>TF IMPORT</h4><p><code>terraform [global options] import [options] ADDR ID</code> -&gt; Is the resource path as <code>RESOURCE_TYPE.RESOURCE_NAME</code>. Examples:</p><pre><code class="language-bash">aws_resourcegroups_group.main
aws_organizations_organizational_unit.apps[&quot;journalbot&quot;] -&gt; Resources created without foreach.
module.app_envs[&quot;temp-app-envs&quot;].aws_organizations_organizational_unit.envs[&quot;prd&quot;] -&gt; Resources created **with foreach**.
</code></pre><p>Using the ADDR in tf import:</p><div><div><div value="ps" label="PowerShell" default=""><pre><code class="language-powershell">tf import -var-file=base.tfvars RESOURCE_TYPE.RESOURCE_NAME ID_OR_ARN # Resources created without foreach.
tf import -var-file=base.tfvars &#x27;RESOURCE_TYPE.RESOURCE_NAME[\&quot;RESOURCE_KEY\&quot;]&#x27; ID_OR_ARN #  Resources created **with foreach**. Please note the `&#x27;&#x27;` for the resource path.
</code></pre></div><div value="sh" label="Bash"><pre><code class="language-bash">tf import -var-file=base.tfvars RESOURCE_TYPE.RESOURCE_NAME ID_OR_ARN # Resources created without foreach.
tf import -var-file=base.tfvars &#x27;RESOURCE_TYPE.RESOURCE_NAME[&quot;RESOURCE_KEY&quot;]&#x27; ID_OR_ARN #  Resources created **with foreach**. Please note the `&#x27;&#x27;` for the resource path.
</code></pre></div></div></div><h2>create symbolic links</h2><div><div><div value="ps" label="PowerShell" default=""><pre><code class="language-powershell">mklink link_name.tf original_file_path.tf # execute it in command prompt as admin
</code></pre></div><div value="sh" label="Bash"><pre><code class="language-bash"># TODO: fill
</code></pre></div></div></div><h2>References</h2><ul><li><a href="https://dzone.com/articles/terraform-cli-cheat-sheet">TF Cheatsheet</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Elementary Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/elementary</link>
            <guid>elementary</guid>
            <pubDate>Wed, 06 Dec 2023 11:48:59 GMT</pubDate>
            <description><![CDATA[This post explains some tips I discovered about Elementary OS.]]></description>
            <content:encoded><![CDATA[<p>This post explains some tips I discovered about <a href="https://elementary.io">Elementary OS</a>.</p><h2>Where the app launcher apps are stored?</h2><ul><li><code>/home/YOUR_USER/.local/share/applications</code></li><li><code>~/.local/share/applications</code></li></ul><h2>How does an app launcher looks like:</h2><p>Outlook shortcut example</p><pre><code class="language-bash">#!/usr/bin/env xdg-open
[Desktop Entry]
Version=1.0
Terminal=false
Type=Application
Name=Outlook
Exec=/opt/vivaldi/vivaldi --profile-directory=Default --app-id=eigpmdhekjlgjgcppnanaanbdmnlnagl
Icon=vivaldi-eigpmdhekjlgjgcppnanaanbdmnlnagl-Default
StartupWMClass=crx_eigpmdhekjlgjgcppnanaanbdmnlnagl
Actions=New-event;New-message;Open-calendar

[Desktop Action New-event]
Name=New event
Exec=/opt/vivaldi/vivaldi --profile-directory=Default --app-id=eigpmdhekjlgjgcppnanaanbdmnlnagl --app-launch-url-for-shortcuts-menu-item=https://outlook.live.com/calendar/deeplink/compose

[Desktop Action New-message]
Name=New message
Exec=/opt/vivaldi/vivaldi --profile-directory=Default --app-id=eigpmdhekjlgjgcppnanaanbdmnlnagl --app-launch-url-for-shortcuts-menu-item=https://outlook.live.com/mail/deeplink/compose

[Desktop Action Open-calendar]
Name=Open calendar
Exec=/opt/vivaldi/vivaldi --profile-directory=Default --app-id=eigpmdhekjlgjgcppnanaanbdmnlnagl --app-launch-url-for-shortcuts-menu-item=https://outlook.live.com/calendar
</code></pre><h2>Nice tip: add <code>xkill</code> as shortcut:</h2><p>First of all, what <code>xkill</code> is? It is a command to <em>kill</em> process by clicking on their windows. The normal usage is:</p><ol><li>Open a terminal</li><li>Set the app you want to kill visible next to the terminal</li><li>Introduce the xkill command in the terminal</li><li>The mouse pointer will change to an <code>x</code>, click on the app windows to kil it. If you want to cancel the operation, right click anywhere</li></ol><p><a href="https://www.tutorialspoint.com/how-to-kill-linux-processes-using-xkill-command">More details about xkill</a></p><p>Next is a custom app launcher example:</p><p>:::info reuse this example:
Please note this example execute the command <code>xkill</code>. You can modify it to run any other command you want to have on the app launcher. Just Update all the properties to your needs, the most important one is the <code>exec</code>, set there the command you want to execute.
:::</p><pre><code class="language-bash">#!/usr/bin/env xdg-open
[Desktop Entry]
Name=xkill
GenericName=Bash Command Execution
Exec=xkill
Comment=Execute xkill command, you will be able to close any windows by clicking on it
Icon=/home/cangulo/.local/share/applications/icons/xkill-icon.svg
Type=Application
Categories=System
Keywords=Command;kill;close
</code></pre><p>Remember to provide an icon, in my case, I created a folder called icons and add the next one:</p><p><img src="assets/xkill-icon.png" alt="xkill icon"/></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GitHub CLI Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/gh-cli/gh-cli</link>
            <guid>/gh-cli/gh-cli</guid>
            <pubDate>Wed, 06 Dec 2023 11:48:59 GMT</pubDate>
            <description><![CDATA[This post contains some scripts for that use GH CLI]]></description>
            <content:encoded><![CDATA[<p>This post contains some scripts for that use GH CLI</p><h2>Delete Workflows run</h2><pre><code class="language-bash">#!/bin/bash

# Read input parameters
owner=&quot;&quot;
repo=&quot;&quot;
branch=&quot;&quot;
workflow_path=&quot;.github/workflows/import.yml&quot;

# get workflow ids
workflow_ids=$(gh api -X GET &quot;/repos/$owner/$repo/actions/runs?branch=$branch&quot; | jq &quot;.workflow_runs[] | select(.path == \&quot;$workflow_path\&quot;) | .id&quot;)

# delete workflow runs for each id
for id in $workflow_ids; do
    echo &quot;deleting $id&quot;
    # test the execution first and uncomment this after
    # gh api -X DELETE &quot;/repos/$owner/$repo/actions/runs/$id&quot; --silent
done

echo &quot;All workflow runs for workflow &#x27;$workflow_path&#x27; on branch &#x27;$branch&#x27; in repository &#x27;$owner/$repo&#x27; have been deleted.&quot;

</code></pre><h2>References</h2><ul><li><a href="https://cli.github.com/manual/">GH CLI</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Git Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/git</link>
            <guid>git</guid>
            <pubDate>Wed, 06 Dec 2023 11:48:59 GMT</pubDate>
            <description><![CDATA[This post explains the next topics:]]></description>
            <content:encoded><![CDATA[<p>This post explains the next topics:</p><ul><li>the git commands I use the most</li><li>some git <em>alias</em> to avoid typing long commands😁👌</li></ul><h2>Git Commands</h2><h3>Git Checkout</h3><p><code>git checkout --track origin/NAME</code>      </p><ul><li>Create a local branch that tracks the remote one                                                                                                                                                                                    </li></ul><p><code>git checkout -</code>                        </p><ul><li>Checkout the previous branch, this can be useful if you go from your feature branch to dev, you update it, and you want to come back to your feature branch to rebase dev                                                           </li></ul><p><code>git checkout tags/&lt;tag&gt; -b &lt;branch&gt;</code>   </p><ul><li>Checkout a branch starting from the tag provided                                                                                                                                                                                    </li></ul><p><code>git switch</code>                            </p><ul><li>New git command to change between branches to avoid using checkout. Currently is in status experimental. </li><li>Check this <a href="https://git-scm.com/docs/git-switch/2.23.0">link</a> and this <a href="https://bluecast.tech/blog/git-switch-branch/">one</a></li></ul><h3>Git Branch</h3><p><code>git branch --list [&lt;pattern&gt;]</code>         </p><ul><li>List all the branches that match the <code>&lt;pattern&gt;</code>. e.g. <code>*-1234</code> list all the branches that end <code>1234</code>                                                                                                                               </li></ul><h3>Gitk</h3><p><code>gitk</code>                                  </p><ul><li>Check Last commits using a GUI                                                                                                                                                                                                      </li></ul><p><code>gitk &lt;filePath&gt;</code>                       </p><ul><li>Check <code>&lt;filePath&gt;</code> last commits using a GUI                                                                                                                                                                                         </li></ul><h3>Git Cherry Pick</h3><p><code>git cherry-pick -n &lt;commit&gt;</code>           </p><ul><li>Let&#x27;s you inspect the files modified in the commit before cherry-pick them. <a href="https://stackoverflow.com/questions/5717026/how-to-git-cherry-pick-only-changes-to-certain-files">Reference</a>                                           </li></ul><h3>Git diff</h3><p><code>git diff [target-branch] -name-status</code> </p><ul><li>List the files modified and what kind of modification (Added, Deleted, Modified) in your branch using the target branch as reference                                                                                                </li></ul><p><code>git diff [target-branch] -name-only</code>   </p><ul><li>List the files modified in your branch using the target branch as reference                                                                                                                                                         </li></ul><h3>Git rebase</h3><h4>quick rebase commands:</h4><pre><code class="language-shell">git fetch
git rebase -i origin/main   # remove the -i if you don&#x27;t want to edit the commits
git push --set-upstream origin &quot;YOUR_BRANCH_NAME&quot; --force
</code></pre><ul><li>cancel rebase: <code>git rebase --abort</code></li></ul><h4>rebase since first commit</h4><p><code>git rebase -i --root</code></p><ul><li>DO IT UNDER YOUR RISK. Do a git rebase since the first commit. </li><li><a href="https://stackoverflow.com/questions/22992543/how-do-i-git-rebase-the-first-commit/23000315">https://stackoverflow.com/questions/22992543/how-do-i-git-rebase-the-first-commit/23000315</a></li></ul><h2>How to configure an Alias</h2><h3>Using Command Line</h3><table><thead><tr><th>Command</th><th>Example</th></tr></thead><tbody><tr><td><code>git config --global alias.[AliasName] [AliasValue]</code></td><td><code>git config --global alias.co checkout</code></td></tr></tbody></table><h3>Editing the git config file</h3><ol><li>Open your <code>.gitconfig</code> file, it is located in your home folder</li><li>In a new line, add the tag <code>[alias]</code></li><li>In the next lines add your alias following the format <code>[TAB space]AliasName = AliasValue</code>.</li></ol><p>Please note this config file is space/tab sensitive so be sure no spaces are added at the end of each line</p><pre><code class="language-bash">[alias]
    b = branch
</code></pre><p>Next are my personal alias:</p><h2>Alias configured</h2><pre><code class="language-bash">[alias]
  b = branch
  bl = branch --list
  bd = branch -D
  co = checkout
  c = commit -am
  cw = commit -am wip
  cob = checkout -b
  cor = &quot;!f() { git checkout --track origin/${1-No Argument Provided}; }; f&quot;
  cp = cherry-pick
  cp-c = cherry-pick --continue
  cp-a = cherry-pick --abort
  re = &quot;!f() { git rebase -i HEAD~${1-No Argument Provided}; }; f&quot;
  re-c = rebase --continue
  re-a = rebase --abort
  re-m = rebase -i --rebase-merges
  pushf = push --force
  pushr = &quot;!f() { currentBranch=$(git branch --show-current);git push --set-upstream origin $currentBranch; }; f&quot;
  pushrf = &quot;!f() { currentBranch=$(git branch --show-current);git push --set-upstream origin $currentBranch --force; }; f&quot;
  fix = &quot;!f() { git add .; git commit --amend --no-edit; git pushrf;}; f&quot;
  dr = &quot;!f() { git reset --hard HEAD~1;}; f&quot;
  undolastco = reset --soft HEAD~1
  st = status
  l = &quot;!f() { git log --oneline -n ${1-15}; }; f&quot;
  lg = &quot;!f() { git log --oneline --grep=${1-No Argument Provided}; }; f&quot;
  settings = config --global --edit
</code></pre><div label="Check the file here" link="cheatsheets/git/git-alias"></div><p>The one I use the most is <code>cob</code>, every time I have to create a new branch I type <code>git cob [BRANCH_NAME]</code>. Also the rebase one, <code>git re develop</code> , that is how I update my branch with the last changes from develop.</p><p>Please note the <code>l</code> and <code>lg</code> are alias defined as Bash functions with input parameters <code>${1-DefaultParameter}</code>.</p><h2>How to update the permissions for bash files in a git repository</h2><p><code>git update-index --chmod=+x path/to/file</code></p><pre><code class="language-powershell">$bashScripts= Get-ChildItem -Name -Filter &quot;*.sh&quot; -Depth 5
foreach ($script in $bashScripts) {
    git update-index --chmod=+x $script
}
</code></pre><h2>undo change in file permissions</h2><p><strong>Scenario</strong>: you copy and paste repositories manually. When you copy it from a external drive the permissions change for all the files</p><p>How to list differences? <code>git diff --summary</code></p><p><strong>Solution</strong>:</p><pre><code class="language-bash">function git_undo_permissions_change_in_repo() {
    git diff -p -R --no-ext-diff --no-color | grep -E &quot;^(diff|(old|new) mode)&quot; --color=never  | git apply
}

function git_undo_permission_change_in_subfolders() {
    # 1 level deep
    for d in ./*/ ; do (cd &quot;$d&quot; &amp;&amp; git diff -p -R --no-ext-diff --no-color | grep -E &quot;^(diff|(old|new) mode)&quot; --color=never  | git apply); done
    # 2 level deep
    for d in ./*/*/ ; do (cd &quot;$d&quot; &amp;&amp; git diff -p -R --no-ext-diff --no-color | grep -E &quot;^(diff|(old|new) mode)&quot; --color=never  | git apply); done
}

</code></pre><h2>References</h2><ul><li><a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases">official docs - git alias</a></li><li><a href="https://opensource.com/article/20/11/git-aliases">8 Git aliases that make me more efficient</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/aws</link>
            <guid>aws</guid>
            <pubDate>Wed, 06 Dec 2023 11:48:59 GMT</pubDate>
            <description><![CDATA[This post contains some useful AWS commands and scripts.]]></description>
            <content:encoded><![CDATA[<p>This post contains some useful AWS commands and scripts.</p><h2>AWS Commands</h2><table><thead><tr><th>Command</th></tr></thead><tbody><tr><td><code>aws sts get-caller-identity</code></td></tr></tbody></table><h3>Filtering command output</h3><ul><li><code>--query PROP_PATH</code>. Like you&#x27;re using <code>jq</code> for querying JSON string. You can save the initial <code>.</code></li><li><code>--output text|json</code>. Output as text print values without quotes.</li></ul><h3>Most used commands</h3><ul><li><code>aws sts get-caller-identity --query Arn --output text</code> get current user ARN</li></ul><h2>Script to verify credentials</h2><pre><code class="language-shell">current_credentials=$(aws sts get-caller-identity --query Arn --output text)
expected_credentials=&quot;arn:aws:iam::{ACCOUNT_ID}}:user/{USER_NAME}&quot;

if [[ &quot;${current_credentials}&quot; != &quot;${expected_credentials}&quot; ]]; then
    echo &quot;\033[31m INVALID CREDENTIALS \033[0m&quot; # PRINT THIS IN RED
    return
fi
</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Bash Scripts Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/bash-scripts</link>
            <guid>bash-scripts</guid>
            <pubDate>Wed, 06 Dec 2023 11:48:59 GMT</pubDate>
            <description><![CDATA[This post list bash commands and scripts I use the most.]]></description>
            <content:encoded><![CDATA[<p>This post list bash commands and scripts I use the most.</p><h2>Execute a command inside subfolders</h2><pre><code class="language-bash">function recursive_for_loop { 
    ls -1| until ! read f; do
        if [ -d $f  -a ! -h $f ];
        then
            cd -- &quot;$f&quot;;
            recursive_for_loop
            echo &quot;### Folder $f&quot;; 
            git status; # replace here your command

            # use recursion to navigate the entire tree; git status;
            cd ..;
        fi;
    done;
};
recursive_for_loop
</code></pre><p>Source: <a href="https://www.baeldung.com/linux/execute-command-directories">baeldung.com/linux/execute-command-directories</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Documentation Cheatsheet]]></title>
            <link>https://cangulo.github.io/cheatsheets/documentation</link>
            <guid>documentation</guid>
            <pubDate>Wed, 06 Dec 2023 11:48:59 GMT</pubDate>
            <description><![CDATA[This post contains list all the tools and templates I use for documenting projects:]]></description>
            <content:encoded><![CDATA[<p>This post contains list all the tools and templates I use for documenting projects:</p><ol><li>Incidents / postmortem templates</li><li>Architectural Decision Record <a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/architectural-decision-records/adr-process.html">ADR</a></li><li>VS Code extensions</li><li>Shell Scripts: bash and powershell</li></ol><h2>1. Incidents / postmortem templates</h2><div><div><div value="template" label="Template" default=""><pre><code class="language-yml" metastring="file=./templates/incident.yml" file="./templates/incident.yml"></code></pre></div><div value="example" label="Example"><pre><code class="language-yml" metastring="file=./examples/20231124-db-not-reachable.yml" file="./examples/20231124-db-not-reachable.yml"></code></pre></div></div></div><h2>2. Architectural Decision Record <a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/architectural-decision-records/adr-process.html">ADR</a></h2><pre><code class="language-markdown" metastring="file=./templates/adr.yml" file="./templates/adr.yml"></code></pre><p>example <a href="./examples/20231124-db-not-reachable.yml">here</a>.</p><h2>3. VS Code extensions</h2><table><thead><tr><th>Function</th><th>Extension</th><th>Tip</th><th>Link for installing it</th></tr></thead><tbody><tr><td>Create Diagrams</td><td><a href="#drawio-integration">Draw.io Integration</a></td><td>You can save diagrams as draw.io.png so they are visible in the readme!</td><td><a href="https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio">link</a></td></tr></tbody></table><h3>draw.io-integration</h3><p>I use this extension to manipulate Diagrams in VS code and make them visible in the README.md. Next are creenshots:</p><h4>Editing Diagrams</h4><p><img src="imgs/vscode-drawio.png" alt="Alt text"/></p><div label="Extension Link" link="https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio"></div><h4>Diagram visualization in the README</h4><p><img src="imgs/vscode-drawio-readme.png" alt="Alt text"/></p><div label="Readme" link="https://github.com/cangulo-templates/tf-cicd-template"></div><p>README.md content: </p><pre><code class="language-markdown"># tf-cicd-template

![solution-schema](docs/solution-schema.drawio.png)
</code></pre><h4>Diagram changes visualization in PR</h4><p><img src="imgs/vscode-drawio-pr.png" alt="Alt text"/></p><div label="PR adding the diagram" link="https://github.com/cangulo-templates/tf-cicd-template/pull/11/files"></div><div label="PR editting the diagram" link="https://github.com/cangulo-templates/tf-cicd-template/pull/13/files"></div><h2>4. Shell Scripts: bash and powershell</h2><table><thead><tr><th>Script</th><th>Description</th><th>When to use</th></tr></thead><tbody><tr><td><a href="#output-repository-structure">output repository structure</a></td><td>List directory content in tree format</td><td>Document the repository structure in the README.md</td></tr></tbody></table><h3>output repository structure</h3><div><div><div value="sh" label="Bash" default=""><ol><li>Install <code>tree</code> command</li><li>Execute the command. Next are some useful parameters:<ol><li><code>-L {LIMIT}</code> option  to limit the display to <code>{LIMIT}</code> levels of depth.</li><li><code>-a</code> parameter to list all hiddin files (they start with <code>.</code>) We need this to list files GH workflows files <code>.github/workflow/*</code></li><li>The <code>-I &#x27;{FOLDER_TO_IGNORE}/&#x27;</code> option tells <code>tree</code> to ignore files under <code>{FOLDER_TO_IGNORE}</code>.</li><li><code>&gt; repo-structure.txt</code> to store the output, edit its content and paste it into your README.md</li></ol></li></ol><pre><code class="language-bash">sudo apt-get install tree
</code></pre><pre><code class="language-bash">tree -L 3 -a -I &#x27;node_modules&#x27; -I &#x27;.git&#x27; -I &#x27;.vscode&#x27;  &gt; repo-structure.txt 
</code></pre><details><summary>Output Example</summary><p><img src="imgs/shell-tree-output.png" alt="Alt text"/></p></details></div><div value="ps" label="PowerShell"><pre><code class="language-powershell">Tree /F &gt; repo-structure.txt 
</code></pre></div></div></div><h4>Examples:</h4><ul><li><a href="https://github.com/cangulo-templates/tf-cicd-template#repo-structure">REARDME.md wih repo-structure</a></li><li><a href="https://github.com/cangulo-templates/tf-cicd-template/pull/14/files">PR adding repo-structure</a></li></ul><p><img src="imgs/shell-tree-readme.png" alt="Alt text"/></p>]]></content:encoded>
        </item>
    </channel>
</rss>