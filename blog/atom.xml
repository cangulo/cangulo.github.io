<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cangulo.github.io/blog</id>
    <title>Carlos Angulo Posts</title>
    <updated>2020-12-15T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cangulo.github.io/blog"/>
    <subtitle>Here you can the general publications I do regarding different subjects as devops or programming 🙂</subtitle>
    <icon>https://cangulo.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Load custom variables at Terminal startup]]></title>
        <id>bash/3-load-vars</id>
        <link href="https://cangulo.github.io/blog/bash/3-load-vars"/>
        <updated>2020-12-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, I will explain how to load custom variables by reading a JSON file, this will be done every time we open a Terminal. I will also improve the shortcuts we create in the previous posts.]]></summary>
        <content type="html"><![CDATA[<p>In this post, I will explain how to load custom variables by reading a JSON file, this will be done every time we open a Terminal. I will also improve the shortcuts we create in the previous posts.</p><h2>Requirements</h2><ul><li>Linux (I&#x27;m using <a href="https://elementary.io">Elementary OS</a>, a Ubuntu-based distro, check it!)</li><li><a href="https://code.visualstudio.com">VS Code</a>. If you don&#x27;t want to use it, change all the <code>code</code> commands in the bash code for your text editor. Alternatives: <em>gedit</em> or <a href="https://gitlab.gnome.org/GNOME/gnome-text-editor">gnome-text-editor</a>.</li><li><a href="https://github.com/junegunn/fzf">fzf</a> command-line fuzzy finder</li></ul><h2>Notes</h2><ul><li>Remember to add execution permissions to the scripts through <code>chmod +x</code></li><li>Profile script: <code>$HOME/.bashrc</code> for bash terminal and <code>$HOME/.zshrc</code> for zsh </li></ul><h2>Variables</h2><p>Let&#x27;s say I want to define some variables as:</p><ul><li>my local github repositories path</li><li>my documents path</li><li>path to a specific file, in this case, the path to a JSON file containing some bookmarks I have, check my <a href="../1-interactive-bookmarks/interactive-bookmarks.mdx">previous post</a></li></ul><p>Then, we define them in the profile script as:</p><pre><code class="language-bash" metastring="file=./code/1-declare-vars.sh#L3-" file="./code/1-declare-vars.sh#L3-"></code></pre><p>Now we can use them during the terminal session as well as from any defined function. </p><p><img src="use-localrepo-variable.gif" alt="using the variables after loading the terminal"/></p><p>Let&#x27;s append the next function and alias at the bash profile. Please note those are using the variables defined before.</p><pre><code class="language-bash" metastring="file=./code/2-add-functions.sh#L3-" file="./code/2-add-functions.sh#L3-"></code></pre><p>Now, we can use them after opening the Terminal.</p><p><img src="use-gotoRepos-function.gif" alt="using the variables after loading the terminal"/></p><h2>Behavior vs Configuration</h2><ul><li>Behavior: Functions as <code>listBookmarks</code></li><li>Configuration: Parameters as <code>bookmarksFile</code> used in the functions.</li></ul><p>If we change the bookmarks location, should we change the <code>listBookmarks</code> function ? I think not, we should decouple the configuration from the behavior as much as possible, otherwise we depend on hardcoded values along the functions making it hard to maintain. </p><p>On the other hand, I think having a central location for all the parameters is much cleaner, if want to migrate  or share your current setup, you only need to copy the functions and update the parameters. Otherwise, you will have to go function-by-function updating the parameters. </p><div id="d3mlE7uhX8KFgEmY"></div><h2>One extra mile: Define the parameters as JSON</h2><p>Let&#x27;s migrate the variables to a json file as follows. Please note all the paths are now absolute paths.</p><pre><code class="language-JSON" metastring="file=./code/3-vars.json" file="./code/3-vars.json"></code></pre><p>To set the json keys as the parameters name we have to:</p><ol><li>Define the json file path. We will consider those as the main settings.</li><li>Use the <code>jq</code> command to retrieve the keys and values.</li><li>Use the <code>eval</code> command to execute the <code>key=value</code>  for each one.</li></ol><p>Next is the solution, replace the variables declaration in your profile for this.</p><pre><code class="language-bash">settingsFile=&quot;/home/cangulo/repos/cangulo-blog/cangulo.github.io/blog/posts/bash/3-setup-custom-env-variables/code/3-vars.json&quot;
eval &quot;$(jq -r &#x27;to_entries | .[] | .key + &quot;=&quot; + (.value | @sh)&#x27; &lt;$settingsFile)&quot;
</code></pre><details><summary>In case you want to go into details in the solution. Click here.</summary><p>References:</p><ul><li>Settings json keys as variables<code>jq</code>. <a href="https://unix.stackexchange.com/a/413886">Link</a></li><li>What <code>@sh</code> means in <code>jq</code>. Quote string for bash. <a href="https://stedolan.github.io/jq/manual/">Link</a></li></ul><p><code>jq -r &#x27;to_entries&#x27;</code>  structures the json as key/value pair array:</p><p><img src="./details/1-to_entries.png" alt="1-to_entries.png"/></p><p><code>jq -r &#x27;to_entries | .[]&#x27;</code>  prepare the array items for the iteration:</p><p><img src="./details/2-iterate-over-array-items.png" alt="2-iterate-over-array-items.png"/></p><p><code>jq -r &#x27;to_entries | .[] | .key + &quot;=&quot; + .value&#x27;</code> build the <code>key=value</code> expressions </p><p><img src="./details/3-build-variable-declaration-code.png" alt="3-build-variable-declaration-code.png"/></p><p><code>jq -r &#x27;to_entries | .[] | .key + &quot;=&quot; + (.value | @sh)&#x27;</code> format the expression
<img src="./details/4-format-declaration.png" alt="4-format-declaration.png"/></p></details><p>Nothing more for Today! Do you think this is a good approach? How would you do it? Let me know in the comments below.</p><div></div><div slug="bash/3-load-vars" title="Load custom variables at Terminal startup" tags="linux,productivity,hack,bash,zsh,terminal"></div><div></div>]]></content>
        <author>
            <name>Carlos Angulo Mascarell</name>
            <uri>https://github.com/cangulo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Add shortcuts to your bash terminal]]></title>
        <id>bash/2-add-shortcuts</id>
        <link href="https://cangulo.github.io/blog/bash/2-add-shortcuts"/>
        <updated>2020-12-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, I will add shortcuts and other cool features to my bash terminal.]]></summary>
        <content type="html"><![CDATA[<p>In this post, I will add shortcuts and other cool features to my bash terminal.</p><h2>Requirements</h2><ul><li>Linux (I&#x27;m using <a href="https://elementary.io">Elementary OS</a>, a Ubuntu-based distro, check it!)</li><li><a href="https://code.visualstudio.com">VS Code</a>. If you don&#x27;t want to use it, change all the <code>code</code> commands in the bash code for your text editor. Alternatives: <em>gedit</em> or <a href="https://gitlab.gnome.org/GNOME/gnome-text-editor">gnome-text-editor</a>.</li><li>Remember to add execution permissions to the scripts through <code>chmod +x</code></li></ul><h2>Aliases</h2><p>You can create <strong>aliases</strong> to avoid type long commands. Next are some examples:</p><div><div value="bash" label="bash" default=""><pre><code class="language-bash" metastring="file=./code/scripts/aliases-bash.sh#L3-" file="./code/scripts/aliases-bash.sh#L3-"></code></pre><div label="aliases-bash.sh" link="posts/bash/2-add-shortcuts/code/scripts/aliases-bash.sh"></div></div><div value="zsh" label="zsh"><pre><code class="language-bash" metastring="file=./code/scripts/aliases-zsh.sh#L3-" file="./code/scripts/aliases-zsh.sh#L3-"></code></pre><div label="aliases-zsh.sh" link="posts/bash/2-add-shortcuts/code/scripts/aliases-zsh.sh"></div></div></div><p><img src="goToReposExecution.gif" alt="goal"/></p><p>Please note <code>$HOME</code> is an environment variable defined by the system, it refers to your home path, in my case <code>/home/carlos</code>.</p><h2>Functions</h2><p>You can also define functions as shortcuts for daily tasks. I have the next ones:</p><pre><code class="language-bash" metastring="file=./code/scripts/functions.sh" file="./code/scripts/functions.sh"></code></pre><h2>How to integrate those shortcuts in the bash terminal?</h2><p>In order to load the shortcuts every time we open a terminal, we have to append them in the shell profile (<code>$HOME/.bashrc</code> for bash terminal, and <code>$HOME/.zshrc</code> for zsh). </p><p>However, the profile script will become bigger for every new shortcut we add, to make this extensible we will <em>source</em> (<a href="https://linuxize.com/post/bash-source-command/">load</a>) the shortcuts from separate scripts. Let me list them:</p><ol><li><code>alias-bash.sh.sh</code> /  <code>alias-zsh.sh</code></li><li><code>functions.sh</code></li></ol><p>Append the next code to your profile:</p><pre><code class="language-bash" metastring="file=./code/sourceScripts.sh" file="./code/sourceScripts.sh"></code></pre><details><summary>Some notes about loading the functions:</summary><p>if you want to use the functions in scripts that you call manually from the terminal, you have to <code>export</code> them as next:</p><div><div value="bash" label="bash" default=""><pre><code class="language-bash">funcName(){

}
export -f funcName
</code></pre></div><div value="zsh" label="zsh"><pre><code class="language-bash">funcName(){

}
export funcName
</code></pre></div></div><p><a href="https://www.baeldung.com/linux/bash-variables-export">reference</a></p></details><p>Nothing else! I hope this saves you some time using the terminal. Do you have similar shortcuts? Share them in the comments below.</p><div id="ZVik7pBtu9dNS"></div><div></div><div slug="posts/bash/2-add-shortcuts" title="Add shortcuts to your bash terminal" tags="linux,productivity,hack,bash,zsh,terminal"></div><div></div>]]></content>
        <author>
            <name>Carlos Angulo Mascarell</name>
            <uri>https://github.com/cangulo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Create an interactive bookmarks menu in your terminal]]></title>
        <id>bash/1-interactive-bookmarks</id>
        <link href="https://cangulo.github.io/blog/bash/1-interactive-bookmarks"/>
        <updated>2020-12-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, I am going to implement an interactive bookmarks menu using fzf.]]></summary>
        <content type="html"><![CDATA[<p>In this post, I am going to implement an interactive bookmarks menu using fzf.</p><h2>Requirements</h2><ul><li>Linux (I&#x27;m using <a href="https://elementary.io">Elementary OS</a>, a Ubuntu-based distro, check it!)</li><li><a href="https://github.com/junegunn/fzf">fzf</a> command-line fuzzy finder</li><li>Remember to add execution permissions to the scripts through <code>chmod +x</code></li></ul><h2>Demo</h2><p><img src="goal.gif" alt="goal"/></p><p>As you see, every time I call the function <code>listBookmarks</code> the following paths are listed interactively. </p><ul><li>/home/cangulo/repos/cangulo-tf</li><li>/home/cangulo/repos/cangulo-nuke</li></ul><p>I can move through them using the up/down keys, and navigate into by pressing Enter.</p><p>On the other hand, in case similar paths are listed, I can filter by typing keywords.</p><p><img src="demo_filter.gif" alt="goal"/></p><h2>Implementation</h2><pre><code class="language-bash" metastring="file=./code/listbookmarks.sh" file="./code/listbookmarks.sh"></code></pre><div label="listBookmarks function" link="posts/bash/1-interactive-bookmarks/code/listbookmarks.sh"></div><p>Let me define the basic structure:</p><ol><li>Read the paths (let&#x27;s call them <em>bookmarks</em>)</li><li>List them in an interactive way</li><li>Once a bookmark is selected, navigate to it</li></ol><p>Now let&#x27;s dive into the details:</p><h3>1. Read the bookmarks</h3><p>First, in order to make this extensible, the paths are listed in a JSON file:</p><pre><code class="language-json" metastring="file=code/bookmarks.json" file="code/bookmarks.json"></code></pre><div label="bookmarks" link="posts/bash/1-interactive-bookmarks/code/bookmarks.json"></div><p>We can print the file content using <code>cat</code>, and then use <code>jq</code> to query the array items. </p><p><code>cat $bookmarksFile  | jq -r &#x27;.[]&#x27;</code></p><details><summary>Why I&#x27;m using a JSON file instead of a simple text file. Click here for the answer:</summary><p>  It is because in the next article I will define more advanced bookmarks with different properties used by new features 😁</p></details><h3>2. List the bookmarks</h3><p>Here is where fzf comes up, by piping the bookmarks to fzf, they will be output them as an interactive list.</p><p><code>cat $bookmarksFile | jq -r &#x27;.[]&#x27; | fzf</code></p><h3>3. Once a bookmark is selected, navigate to it</h3><p><code>fzf</code> returns the path selected, we save it to a variable.</p><p><code>local pathSelected=$(cat $bookmarksFile | jq -r &#x27;.[]&#x27; | fzf)</code></p><p>We check if it is not empty (<code>-n</code>) before moving into:</p><pre><code class="language-bash">if [[ -n &quot;$pathSelected&quot; ]]; then
    cd $pathSelected
else
    echo &quot;no bookmark selected&quot;
fi
</code></pre><h2>Bonus: execute this every time you open a terminal</h2><p>You have to add this in your bash or zsh profile (<em>.bashrc</em>, <em>.zshrc</em> ). Just append the <code>listBookmarks</code> implementation at the end, update the <code>bookmarksFile</code> variable to be a full path, and call the function.</p><pre><code class="language-bash">listBookmarks() {
    local bookmarksFile=&#x27;YOUR_PATH/bookmarks.json&#x27;
    local pathSelected=$(cat $bookmarksFile |
        jq -r &#x27;.[]&#x27; |
        fzf)

    if [[ -n &quot;$pathSelected&quot; ]]; then
        cd $pathSelected
    else
        echo &quot;no bookmark selected&quot;
    fi
}

listBookmarks
</code></pre><p>And that is all! I hope this saves you some time using the terminal. Do you find this useful? Do you have similar functions? Let me know in the comments below.</p><div id="xUPOqo6E1XvWXwlCyQ"></div><div></div><div slug="posts/bash/1-interactive-bookmarks" title="Create an interactive bookmarks menu in your terminal" tags="linux,productivity,hack,zsh,bash,terminal"></div><div></div>]]></content>
        <author>
            <name>Carlos Angulo Mascarell</name>
            <uri>https://github.com/cangulo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to use the PowerShell Profile to be more productive]]></title>
        <id>ps-profile-productive</id>
        <link href="https://cangulo.github.io/blog/ps-profile-productive"/>
        <updated>2020-08-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, I will explain how to set up shortcuts in the PowerShell Profile. Everything in this article works for PowerShell 5.1 and later.]]></summary>
        <content type="html"><![CDATA[<p>In this post, I will explain how to set up shortcuts in the PowerShell Profile. Everything in this article works for PowerShell 5.1 and later.</p><p>If you are a PowerShell (a.k.a. PS) user, I&#x27;m sure at some point you repeat operations as navigating to a specific folder (e.g. your local GitHub repository). Maybe you run a script to clean or prepare your environment. Let&#x27;s define those two scenarios as next:</p><ol><li>Go to your local git repository folder.<ul><li>Code to execute: <code>cd .\source\repos\</code></li></ul></li><li>Execute a script.<ul><li>Code to execute: <code>$HOME\source\repos\TaskManager\startTaskManagerScript.ps1</code></li></ul></li></ol><h2>What is the PS Profile?</h2><p>The PS Profile is a script that is run when the console starts, setting custom user settings as variables, aliases or functions. We can also use it to execute custom commands to prepare our local environment. Check your <code>$Profile</code> variable to know where your profile is stored.</p><p><img src="./2020-08-26-configuring-powershell-profile/Profile-variable.png" alt="Profile variables"/></p><h2>Shortcuts</h2><p>The shortcuts we are going to set are functions or aliases depending on the following situations:</p><ol><li>For a command with static parameters, we will write functions. For example, <code>goToRepos</code> as a shortcut for <code>cd $HOME\source\repos</code>. The code will be:</li></ol><p><code>function NAME { COMMAND_WITH_PARAMS }</code> -&gt; <code>function goToRepos { cd $HOME\source\repos }</code></p><ol start="2"><li>We will define an alias for frequently used commands which we call with different parameters. For example, we use <code>Select-String</code> to filter file content as next:</li></ol><pre><code class="language-powershell">Select-String [-Pattern] PATTERN [-Path] PATH
</code></pre><p><img src="ss-executed.png"/></p><p>Instead of writing <code>Select-String</code>, we could write <code>ss</code>. Next is the alias:</p><p><code>New-Alias -Name ALIAS -Value COMMAND</code> -&gt; <code>New-Alias -Name ss -Value Select-String</code></p><p>In our case, we want to avoid typing the full <em>startTaskManagerScript</em>, so we set that path as COMMAND.</p><p><code>New-Alias -Name startTaskManagerAPI -Value $HOME\source\repos\TaskManager\startTaskManagerScript.ps1</code></p><h3>Creating the profile</h3><p>Let&#x27;s create and open the PS profile, execute the following command in PS: <code>code $PROFILE</code>, you should see the code editor empty. Considering that both commands share the <code>$HOME\source\repos</code> path, we could define a variable to short them as next:</p><pre><code class="language-powershell"># Variables

$localRepo = $HOME + &#x27;\source\repos&#x27;

# Functions

function goToRepos { cd $localRepo }

# Alias

New-Alias -Name startTaskManagerAPI -Value $localRepo\TaskManager\startTaskManagerScript.ps1
</code></pre><p>Please note the <code>$localrepo</code> variable will be available during the PS session. This means you can use it anytime, just as the variable <code>$HOME</code>. Paste the previous code into your profile and save it.</p><p>Open a new PS window. Maybe the next error will show up:</p><p><img src="./2020-08-26-configuring-powershell-profile/digitally-signed-problem.png" alt="Problem Signature Profile"/></p><p>That is because PS has an execution policy that only accepts signed scripts (<code>AllSigned</code>). We need to change it to <code>RemoteSigned</code> to verify the signature for remote scripts, but not locals. We have to do it using the following command:</p><p><code>Set-ExecutionPolicy RemoteSigned -Scope CurrentUser</code>. Now we are good to go, open a new PS and try to execute the shortcuts we defined. </p><p><img src="./2020-08-26-configuring-powershell-profile/shortcuts-execution.png" alt="Shortcuts execution"/></p><p>:::tip use the autocomplete feature!
You don&#x27;t need to write your aliases or functions completely. Just type the initial part and press <code>tab</code>.
:::</p><p>And we&#x27;re done! I hope this helps you to save time when using PS. Do you know any other tweak to be more productive? Feel free to share it in the comments!</p><h2>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-5.1">PowerShell Profiles Reference for PS 5.1</a></li><li><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-5.1#the-profile-files">Profiles Files in PS 5.1</a></li><li><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-5.1#example-4--create-an-alias-to-an-executable-file">Example 4: Create an alias to an executable file</a></li><li><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-5.1#example-4--create-an-alias-to-an-executable-file">Example 5: Create an alias for a command with parameters</a></li><li><a href="https://www.tenforums.com/general-support/107659-how-sign-powershell-profile-w-self-signed-certificate.html">How to sign PowerShell profile w/ self-signed certificate?</a></li><li><a href="https://www.hanselman.com/blog/SigningPowerShellScripts.aspx">Signing PowerShell Scripts</a></li></ul><div></div><div slug="posts/ps-profile-productive" title="How to use the PowerShell Profile to be more productive" tags="windows10,productivity,hack,powershell"></div><div></div>]]></content>
        <author>
            <name>Carlos Angulo Mascarell</name>
            <uri>https://github.com/cangulo</uri>
        </author>
    </entry>
</feed>