"use strict";(self.webpackChunkcangulo_github_io=self.webpackChunkcangulo_github_io||[]).push([[8748],{368:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"challenge-seeker","metadata":{"permalink":"/values/challenge-seeker","source":"@site/blog/values/challenge-seeker/index.mdx","title":"Challenge Seeker","description":"To document - Definition","date":"2021-11-05T22:56:28.901Z","formattedDate":"November 5, 2021","tags":[{"label":"challenge","permalink":"/values/tags/challenge"},{"label":"progress","permalink":"/values/tags/progress"}],"readingTime":1.41,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"nextItem":{"title":"What have I learnt as Developer?","permalink":"/values/developer"}},"content":"import ShareCard from \'/src/components/blog/share.js\'\\nimport Caption from \'/src/components/blog/caption.js\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport AboutMePostArea from \'/src/mdx_components/aboutme_area.mdx\'\\n\\n\x3c!--truncate--\x3e\\n\\n### To document - Definition\\n\\nLet\'s make something clear, **to document is not to add comments to your code**. It means, explaining \\n\\n* Input -> what we expect\\n* Output -> what we should return\\n* Middle steps -> what we do with the input in order to produce an output\\n* Different scenarios -> The different paths we took when producing the output\\n* Technical approach decided and the reasons for it -> answer to a future developer which is reading your code or checking the solution, why you took that approach.\\n\\nIt seems a lot but it isn\'t, you don\'t to have to write the bible but you have to write the essential to ensure anyone that joins your time could understand the feature. You want more arguments? Good documentation saves you calls and reduce person dependencies.\\n\\n:::note **Did you know this phrase?**  \\nAlways code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.\\n:::\\n\\nRegarding documentation, I prefer to adapt it as next:\\n\\n:::tip \\nAlways document as if the guy who will fix a bug in productions is YOU one year later. Try to make your life easier!\\n:::\\n\\n## Team Player\\n\\nkeyword here are:\\n* Timebox\\n* Team situation\\n* previous experience\\n\\nbut when someone in the team is totally lost, we should help.\\n\\n## References\\n\\n* [official docs - git alias](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases)\\n* [8 Git aliases that make me more efficient](https://opensource.com/article/20/11/git-aliases)\\n\\n<AboutMePostArea/>\\n\\n## Did you like it? Share it\\n\\n<ShareCard \\n  slug=\\"cheatsheets/git\\" \\n  title=\\"Git Cheatsheet\\" \\n  tags={[\\"git\\", \\"githooks\\", \\"alias\\"]} />\\n\\n<Comments\\n  slug=\\"cheatsheets/git\\"  />"},{"id":"developer","metadata":{"permalink":"/values/developer","source":"@site/blog/values/developer/index.mdx","title":"What have I learnt as Developer?","description":"What does it means to be a developer?","date":"2021-11-05T22:56:28.901Z","formattedDate":"November 5, 2021","tags":[{"label":"devops","permalink":"/values/tags/devops"},{"label":"deployment","permalink":"/values/tags/deployment"},{"label":"deliver","permalink":"/values/tags/deliver"},{"label":"cicd","permalink":"/values/tags/cicd"}],"readingTime":1.18,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Challenge Seeker","permalink":"/values/challenge-seeker"},"nextItem":{"title":"What I have learn as DevOps","permalink":"/values/devops"}},"content":"import ShareCard from \'/src/components/blog/share.js\'\\nimport Caption from \'/src/components/blog/caption.js\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport AboutMePostArea from \'/src/mdx_components/aboutme_area.mdx\'\\n\\n\x3c!--truncate--\x3e\\n\\n## What does it means to be a developer?\\nFirst, the definition should include \\"code\\", if you don\'t know how to code, you can\'t implement solutions. Okey, but what else? Let\'s focus on the `implement` word, a developer should implement the best solution, in **quality** terms, but given some **circumstances**. It is not the same develop a hot fix for production than to develop a feature in the normal weekly basis.\\n\\nNice, so a developer implements solutions given some circumstances. That is my definition. Then, can a developer propose solution? yes, but if your work is more to propose than to implement, maybe you are an `architect` \ud83d\ude1c.\\n\\n## Quality vs Deadline?\\nQuality vs Deadline? yeah, that is a big question, and the answer, for me, is compose by two words: **balance **and **circumstances**. \\nA developer should always aim for the best quality, without over engineering the solution, but also taking into account the deadlines. When you have an issue that requires a quick fix, you should work on solving the issue, not into improving the software, the main goal is  fixing the area that is failing. Any improvement should be included as a normal feature. \\n\\n<AboutMePostArea/>\\n\\n## Did you like it? Share it\\n\\n<ShareCard \\n  slug=\\"values/developer\\" \\n  title=\\"What I have learn as Developer\\" \\n  tags={[\\"developer\\", \\"experience\\", \\"thoughts\\"]} />\\n\\n<Comments\\n  slug=\\"values/developer\\"  />"},{"id":"devops","metadata":{"permalink":"/values/devops","source":"@site/blog/values/devops/index.mdx","title":"What I have learn as DevOps","description":"Devops - definition","date":"2021-11-05T22:56:28.901Z","formattedDate":"November 5, 2021","tags":[{"label":"devops","permalink":"/values/tags/devops"},{"label":"deployment","permalink":"/values/tags/deployment"},{"label":"deliver","permalink":"/values/tags/deliver"},{"label":"cicd","permalink":"/values/tags/cicd"}],"readingTime":1.25,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"What have I learnt as Developer?","permalink":"/values/developer"},"nextItem":{"title":"What is documentation ?","permalink":"/values/documentation"}},"content":"import ShareCard from \'/src/components/blog/share.js\'\\nimport Caption from \'/src/components/blog/caption.js\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport AboutMePostArea from \'/src/mdx_components/aboutme_area.mdx\'\\n\\n\x3c!--truncate--\x3e\\n\\n## Devops - definition\\n\\nYou know how happy I was when I discovered Terraform (TF) and deployment pipelines? A lot, but why? simple, before the Infrastructure as Code (IaC) concept, developers should provide the executable file to sys admins, then, they deploy it into the servers for each environment.  This was quite a manual process. \\n\\nThen the IaC concept appears, developers code the infrastructure they need (Lambdas, EC2 instance, etc) and link the solution code to those. When a feature was delivered, a pipeline to deploy the IaC and the solution code is executed. The first environment to be deployed is TST, once it has been fully tested, we can promote the same code to ACC, again, once it has been tested, it can be promoted to PRD. In all the process, we are sure all the Infrastructure and the solution is the same for all the environments. Any resource that is created in TST, will also be created in all the other envs, in other words, we trust IaC framework to make sure the infrastructure is the same for all the envs.\\nThis simplifies the deployment process making developers own the features in all the environments, ensuring the same solution will be deployed to different envs without requiring manual intervention. \\n\\n<AboutMePostArea/>\\n\\n## Did you like it? Share it\\n\\n<ShareCard \\n  slug=\\"values/devops\\" \\n  title=\\"What I have learn as DevOps\\" \\n  tags={[\\"devops\\", \\"experience\\"]} />\\n\\n<Comments\\n  slug=\\"values/devops\\"  />"},{"id":"documentation","metadata":{"permalink":"/values/documentation","source":"@site/blog/values/documentation-hero/index.mdx","title":"What is documentation ?","description":"To document - Definition","date":"2021-11-05T22:56:28.901Z","formattedDate":"November 5, 2021","tags":[{"label":"documentation","permalink":"/values/tags/documentation"},{"label":"docs","permalink":"/values/tags/docs"}],"readingTime":1.41,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"What I have learn as DevOps","permalink":"/values/devops"},"nextItem":{"title":"Learner","permalink":"/values/learner"}},"content":"import ShareCard from \'/src/components/blog/share.js\'\\nimport Caption from \'/src/components/blog/caption.js\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport AboutMePostArea from \'/src/mdx_components/aboutme_area.mdx\'\\n\\n\x3c!--truncate--\x3e\\n\\n### To document - Definition\\n\\nLet\'s make something clear, **to document is not to add comments to your code**. It means, explaining \\n\\n* Input -> what we expect\\n* Output -> what we should return\\n* Middle steps -> what we do with the input in order to produce an output\\n* Different scenarios -> The different paths we took when producing the output\\n* Technical approach decided and the reasons for it -> answer to a future developer which is reading your code or checking the solution, why you took that approach.\\n\\nIt seems a lot but it isn\'t, you don\'t to have to write the bible but you have to write the essential to ensure anyone that joins your time could understand the feature. You want more arguments? Good documentation saves you calls and reduce person dependencies.\\n\\n:::note **Did you know this phrase?**  \\nAlways code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.\\n:::\\n\\nRegarding documentation, I prefer to adapt it as next:\\n\\n:::tip \\nAlways document as if the guy who will fix a bug in productions is YOU one year later. Try to make your life easier!\\n:::\\n\\n## Team Player\\n\\nkeyword here are:\\n* Timebox\\n* Team situation\\n* previous experience\\n\\nbut when someone in the team is totally lost, we should help.\\n\\n## References\\n\\n* [official docs - git alias](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases)\\n* [8 Git aliases that make me more efficient](https://opensource.com/article/20/11/git-aliases)\\n\\n<AboutMePostArea/>\\n\\n## Did you like it? Share it\\n\\n<ShareCard \\n  slug=\\"cheatsheets/git\\" \\n  title=\\"Git Cheatsheet\\" \\n  tags={[\\"git\\", \\"githooks\\", \\"alias\\"]} />\\n\\n<Comments\\n  slug=\\"cheatsheets/git\\"  />"},{"id":"learner","metadata":{"permalink":"/values/learner","source":"@site/blog/values/learner/index.mdx","title":"Learner","description":"To document - Definition","date":"2021-11-05T22:56:28.901Z","formattedDate":"November 5, 2021","tags":[{"label":"documentation","permalink":"/values/tags/documentation"},{"label":"docs","permalink":"/values/tags/docs"}],"readingTime":1.41,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"What is documentation ?","permalink":"/values/documentation"},"nextItem":{"title":"Team Player Notes","permalink":"/values/team-player"}},"content":"import ShareCard from \'/src/components/blog/share.js\'\\nimport Caption from \'/src/components/blog/caption.js\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport AboutMePostArea from \'/src/mdx_components/aboutme_area.mdx\'\\n\\n\x3c!--truncate--\x3e\\n\\n### To document - Definition\\n\\nLet\'s make something clear, **to document is not to add comments to your code**. It means, explaining \\n\\n* Input -> what we expect\\n* Output -> what we should return\\n* Middle steps -> what we do with the input in order to produce an output\\n* Different scenarios -> The different paths we took when producing the output\\n* Technical approach decided and the reasons for it -> answer to a future developer which is reading your code or checking the solution, why you took that approach.\\n\\nIt seems a lot but it isn\'t, you don\'t to have to write the bible but you have to write the essential to ensure anyone that joins your time could understand the feature. You want more arguments? Good documentation saves you calls and reduce person dependencies.\\n\\n:::note **Did you know this phrase?**  \\nAlways code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.\\n:::\\n\\nRegarding documentation, I prefer to adapt it as next:\\n\\n:::tip \\nAlways document as if the guy who will fix a bug in productions is YOU one year later. Try to make your life easier!\\n:::\\n\\n## Team Player\\n\\nkeyword here are:\\n* Timebox\\n* Team situation\\n* previous experience\\n\\nbut when someone in the team is totally lost, we should help.\\n\\n## References\\n\\n* [official docs - git alias](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases)\\n* [8 Git aliases that make me more efficient](https://opensource.com/article/20/11/git-aliases)\\n\\n<AboutMePostArea/>\\n\\n## Did you like it? Share it\\n\\n<ShareCard \\n  slug=\\"cheatsheets/git\\" \\n  title=\\"Git Cheatsheet\\" \\n  tags={[\\"git\\", \\"githooks\\", \\"alias\\"]} />\\n\\n<Comments\\n  slug=\\"cheatsheets/git\\"  />"},{"id":"team-player","metadata":{"permalink":"/values/team-player","source":"@site/blog/values/team-player/index.mdx","title":"Team Player Notes","description":"To document - Definition","date":"2021-11-05T22:56:28.901Z","formattedDate":"November 5, 2021","tags":[{"label":"team","permalink":"/values/tags/team"},{"label":"softskills","permalink":"/values/tags/softskills"}],"readingTime":1.41,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Learner","permalink":"/values/learner"}},"content":"import ShareCard from \'/src/components/blog/share.js\'\\nimport Caption from \'/src/components/blog/caption.js\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport AboutMePostArea from \'/src/mdx_components/aboutme_area.mdx\'\\n\\n\x3c!--truncate--\x3e\\n\\n### To document - Definition\\n\\nLet\'s make something clear, **to document is not to add comments to your code**. It means, explaining \\n\\n* Input -> what we expect\\n* Output -> what we should return\\n* Middle steps -> what we do with the input in order to produce an output\\n* Different scenarios -> The different paths we took when producing the output\\n* Technical approach decided and the reasons for it -> answer to a future developer which is reading your code or checking the solution, why you took that approach.\\n\\nIt seems a lot but it isn\'t, you don\'t to have to write the bible but you have to write the essential to ensure anyone that joins your time could understand the feature. You want more arguments? Good documentation saves you calls and reduce person dependencies.\\n\\n:::note **Did you know this phrase?**  \\nAlways code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.\\n:::\\n\\nRegarding documentation, I prefer to adapt it as next:\\n\\n:::tip \\nAlways document as if the guy who will fix a bug in productions is YOU one year later. Try to make your life easier!\\n:::\\n\\n## Team Player\\n\\nkeyword here are:\\n* Timebox\\n* Team situation\\n* previous experience\\n\\nbut when someone in the team is totally lost, we should help.\\n\\n## References\\n\\n* [official docs - git alias](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases)\\n* [8 Git aliases that make me more efficient](https://opensource.com/article/20/11/git-aliases)\\n\\n<AboutMePostArea/>\\n\\n## Did you like it? Share it\\n\\n<ShareCard \\n  slug=\\"cheatsheets/git\\" \\n  title=\\"Git Cheatsheet\\" \\n  tags={[\\"git\\", \\"githooks\\", \\"alias\\"]} />\\n\\n<Comments\\n  slug=\\"cheatsheets/git\\"  />"}]}')}}]);