"use strict";(self.webpackChunkcangulo_github_io=self.webpackChunkcangulo_github_io||[]).push([[7040],{8805:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"git","metadata":{"permalink":"/cheatsheets/git","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/cheatsheets/git/git-cheatsheet.mdx","source":"@site/blog/cheatsheets/git/git-cheatsheet.mdx","title":"Git Cheatsheet","description":"This post explains the next topics:","date":"2021-12-08T15:52:11.325Z","formattedDate":"December 8, 2021","tags":[{"label":"git","permalink":"/cheatsheets/tags/git"},{"label":"githooks","permalink":"/cheatsheets/tags/githooks"},{"label":"alias","permalink":"/cheatsheets/tags/alias"}],"readingTime":2.89,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"nextItem":{"title":"Terraform Cheatsheet","permalink":"/cheatsheets/terraform"}},"content":"import ShareCard from \'/src/components/blog/share.js\'\\nimport Caption from \'/src/components/blog/caption.jsx\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport AboutMePostArea from \'/src/mdx_components/aboutme_area.mdx\'\\n\\n\\nThis post explains the next topics:\\n* the git commands I use the most\\n* some git _alias_ to avoid typing long commands\ud83d\ude01\ud83d\udc4c\\n\\n\x3c!--truncate--\x3e\\n\\n## Git Commands\\n\\n### Git Checkout\\n\\n`git checkout --track origin/NAME`      \\n*  Create a local branch that tracks the remote one                                                                                                                                                                                    \\n\\n`git checkout -`                        \\n*  Checkout the previous branch, this can be useful if you go from your feature branch to dev, you update it, and you want to come back to your feature branch to rebase dev                                                           \\n\\n`git checkout tags/<tag> -b <branch>`   \\n*  Checkout a branch starting from the tag provided                                                                                                                                                                                    \\n\\n`git switch`                            \\n*  New git command to change between branches to avoid using checkout. Currently is in status experimental. \\n*  Check this [link](https://git-scm.com/docs/git-switch/2.23.0) and this [one](https://bluecast.tech/blog/git-switch-branch/)\\n\\n### Git Branch\\n\\n`git branch --list [<pattern>]`         \\n*  List all the branches that match the `<pattern>`. e.g. `*-1234` list all the branches that end `1234`                                                                                                                               \\n\\n  \\n### Gitk\\n\\n`gitk`                                  \\n*  Check Last commits using a GUI                                                                                                                                                                                                      \\n\\n`gitk <filePath>`                       \\n*  Check `<filePath>` last commits using a GUI                                                                                                                                                                                         \\n\\n### Git Cherry Pick\\n\\n`git cherry-pick -n <commit>`           \\n*  Let\'s you inspect the files modified in the commit before cherry-pick them. [Reference](https://stackoverflow.com/questions/5717026/how-to-git-cherry-pick-only-changes-to-certain-files)                                           \\n\\n### Git diff\\n\\n`git diff [target-branch] -name-status` \\n*  List the files modified and what kind of modification (Added, Deleted, Modified) in your branch using the target branch as reference                                                                                                \\n\\n`git diff [target-branch] -name-only`   \\n*  List the files modified in your branch using the target branch as reference                                                                                                                                                         \\n\\n### Git rebase\\n\\n`git rebase -i --root`\\n* DO IT UNDER YOUR RISK. Do a git rebase since the first commit. \\n* https://stackoverflow.com/questions/22992543/how-do-i-git-rebase-the-first-commit/23000315\\n\\n\\n## How to configure an Alias\\n\\n### Using Command Line\\n\\n| Command                                              | Example                                 |\\n| ---------------------------------------------------- | --------------------------------------- |\\n| `git config --global alias.[AliasName] [AliasValue]` | `git config --global alias.co checkout` |\\n\\n### Editing the git config file\\n\\n1. Open your `.gitconfig` file, it is located in your home folder\\n2. In a new line, add the tag `[alias]`\\n3. In the next lines add your alias following the format `[TAB space]AliasName = AliasValue`.\\n\\nPlease note this config file is space/tab sensitive so be sure no spaces are added at the end of each line\\n\\n```bash\\n[alias]\\n\\tb = branch\\n```\\n\\nNext are my personal alias:\\n\\n## Alias configured\\n\\n```bash\\n[alias]\\n  b = branch\\n  bl = branch --list\\n  bd = branch -D\\n  co = checkout\\n  cob = checkout -b\\n  cor = checkout --track\\n  cp = cherry-pick\\n  cp-c = cherry-pick --continue\\n  cp-a = cherry-pick --abort\\n  re = rebase -i\\n  re-c = rebase --continue\\n  re-a = rebase --abort\\n  re-m = rebase -i --rebase-merges\\n  pushf = push --force\\n  st = status\\n  l = \\"!f() { git log --oneline -n ${1-15}; }; f\\"\\n  lg = \\"!f() { git log --oneline --grep=${1-NoArgumentProvided}; }; f\\"\\n  pushr = \\"!f() { currentBranch=$(git branch --show-current);git push --set-upstream origin $currentBranch; }; f\\"\\n  settings = config --global --edit\\n```\\n\\n<Caption label=\\"Check the file here\\" linkIsRelative=\\"true\\" link=\\"cheatsheets/git/git-alias\\"/>\\n\\n\\nThe one I use the most is `cob`, every time I have to create a new branch I type `git cob [BRANCH_NAME]`. Also the rebase one, `git re develop` , that is how I update my branch with the last changes from develop.\\n\\nPlease note the `l` and `lg` are alias defined as Bash functions with input parameters `${1-DefaultParameter}`.\\n\\n\\n## References\\n\\n* [official docs - git alias](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases)\\n* [8 Git aliases that make me more efficient](https://opensource.com/article/20/11/git-aliases)\\n\\n<AboutMePostArea/>\\n\\n<ShareCard \\n  slug=\\"cheatsheets/git\\" \\n  title=\\"Git Cheatsheet\\" \\n  tags={[\\"git\\", \\"githooks\\", \\"alias\\"]} />\\n\\n<Comments\\n  slug=\\"cheatsheets/git\\"  />"},{"id":"terraform","metadata":{"permalink":"/cheatsheets/terraform","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/cheatsheets/terraform-cheatsheet.mdx","source":"@site/blog/cheatsheets/terraform-cheatsheet.mdx","title":"Terraform Cheatsheet","description":"This post explains the next topics:","date":"2021-11-08T00:00:00.000Z","formattedDate":"November 8, 2021","tags":[{"label":"terraform","permalink":"/cheatsheets/tags/terraform"}],"readingTime":0.77,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Git Cheatsheet","permalink":"/cheatsheets/git"}},"content":"import AboutMePostArea from \'/src/mdx_components/aboutme_area.mdx\'\\nimport ShareCard from \'/src/components/blog/share.js\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport BrowserWindow from \'/src/components/BrowserWindow\'\\nimport Tabs from \'@theme/Tabs\'\\nimport TabItem from \'@theme/TabItem\'\\n\\nThis post explains the next topics:\\n* How to set up a shortcut for Terraform in the Terminal\\n* The Terraform commands I use the most\\n\\n\x3c!--truncate--\x3e\\n\\n## Create an alias for TF in your Terminal\\n\\nPlease add the next code to your profile depending if you are using PowerShell or bash:\\n\\n<BrowserWindow>\\n<Tabs>\\n  <TabItem value=\\"ps\\" label=\\"PowerShell\\" default>\\n\\n```\\nNew-Alias -Name tf -Value terraform -Force\\n```\\n\\n  </TabItem>\\n  <TabItem value=\\"sh\\" label=\\"Bash\\">\\n\\n```\\nalias tf=terraform\\n```\\n\\n  </TabItem>\\n</Tabs>\\n</BrowserWindow>\\n\\n## TF Commands\\n\\n| Command                     |\\n| --------------------------- |\\n| `tf init`                   |\\n| `tf fmt --recursive`        |\\n| `tf plan -out plan.out`     |\\n| `tf apply -auto-approve `   |\\n| `tf destroy -auto-approve ` |\\n\\n\\n## References\\n\\n* [TF Cheatsheet](https://dzone.com/articles/terraform-cli-cheat-sheet)\\n\\n<AboutMePostArea/>\\n\\n<ShareCard \\n  slug=\\"cheatsheets/git\\" \\n  title=\\"Git Cheatsheet\\" \\n  tags={[\\"git\\", \\"githooks\\", \\"alias\\"]} />\\n  \\n<Comments\\n  slug=\\"cheatsheets/git\\"  />"}]}')}}]);