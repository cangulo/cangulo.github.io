"use strict";(self.webpackChunkcangulo_github_io=self.webpackChunkcangulo_github_io||[]).push([[492],{3905:function(e,t,n){n.d(t,{Zo:function(){return g},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},g=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,h=p["".concat(i,".").concat(m)]||p[m]||s[m]||r;return n?a.createElement(h,c(c({ref:t},g),{},{components:n})):a.createElement(h,c({ref:t},g))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,c=new Array(r);c[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var u=2;u<r;u++)c[u]=n[u];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},97513:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return u},assets:function(){return g},toc:function(){return s},default:function(){return m}});var a=n(83117),o=n(80102),r=(n(67294),n(3905)),c=["components"],l={slug:"cangulo.changelog",title:"cangulo.changelog",date:new Date("2021-11-26T00:00:00.000Z"),group:"projects",authors:"cangulo",tags:["cicd","cangulo.changelog","personal-nuget-packages","changelog"]},i=void 0,u={permalink:"/projects/cangulo.changelog",editUrl:"https://github.com/cangulo/cangulo.github.io/blob/main/blog/projects/nugets/cangulo.changelog.mdx",source:"@site/blog/projects/nugets/cangulo.changelog.mdx",title:"cangulo.changelog",description:"cangulo-nugets/cangulo.changelog",date:"2021-11-26T00:00:00.000Z",formattedDate:"November 26, 2021",tags:[{label:"cicd",permalink:"/projects/tags/cicd"},{label:"cangulo.changelog",permalink:"/projects/tags/cangulo-changelog"},{label:"personal-nuget-packages",permalink:"/projects/tags/personal-nuget-packages"},{label:"changelog",permalink:"/projects/tags/changelog"}],readingTime:.72,truncated:!0,authors:[{name:"Carlos Angulo Mascarell",title:"Software Engineer",url:"https://github.com/cangulo",imageURL:"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png",key:"cangulo"}],nextItem:{title:"cangulo.nuke.prcommitsvalidations",permalink:"/projects/cangulo.nuke.prcommitsvalidations"}},g={authorsImageUrls:[void 0]},s=[{value:"Problem I want to solve",id:"problem-i-want-to-solve",children:[],level:2}],p={toc:s};function m(e){var t=e.components,n=(0,o.Z)(e,c);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Project Web site:")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("a",{parentName:"p",href:"https://cangulo-nugets.github.io/cangulo.changelog.github.io/"},"cangulo-nugets/cangulo.changelog")))),(0,r.kt)("h2",{id:"problem-i-want-to-solve"},"Problem I want to solve"),(0,r.kt)("p",null,"I have the solution ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cangulo-nuke/cangulo.nuke.releasecreator"},"cangulo.nuke.releasecreator")," to handle releases in my GH repos. However, this doesn't document the changes, for that, I need a solution that updates the Changelog and create release notes, all, having as input the commit messages of the last PR merged."))}m.isMDXComponent=!0}}]);