"use strict";(self.webpackChunkcangulo_github_io=self.webpackChunkcangulo_github_io||[]).push([[7955],{3004:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"aws/2-aws-ct-aft-costs","metadata":{"permalink":"/blog/aws/2-aws-ct-aft-costs","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/aws/2-aft-costs/2-aws-control-tower-aft-costs.mdx","source":"@site/blog/posts/aws/2-aft-costs/2-aws-control-tower-aft-costs.mdx","title":"not finished - AWS Control Tower AFT Costs","description":"In this post I\'m going to talk about the costs I faced using AWS Control Tower the latest 3 months. I recommend you read my previous post before continuing. Basic knowledge about AWS Control Tower is required.","date":"2022-04-22T00:00:00.000Z","formattedDate":"April 22, 2022","tags":[{"label":"aws","permalink":"/blog/tags/aws"},{"label":"projects","permalink":"/blog/tags/projects"},{"label":"accounts","permalink":"/blog/tags/accounts"},{"label":"setup","permalink":"/blog/tags/setup"},{"label":"costs","permalink":"/blog/tags/costs"}],"readingTime":7.23,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"nextItem":{"title":"Reducing costs when using AWS Control Tower AFT","permalink":"/blog/aws/1-aws-ct-aft-reduce-cost"}},"content":":::info\\nIn this post I\'m going to talk about the costs I faced using AWS Control Tower the latest 3 months. I recommend you read my [previous post](../1-setup-aws-account-envs/1-aws-control-tower-aft.mdx) before continuing. Basic knowledge about AWS Control Tower is required.\\n:::\\n\\n\x3c!--truncate--\x3e\\n\\n:::caution\\n\\nThis post is not finished yet\\n\\n:::\\n\\n## Context\\n\\nIn my [last post](../1-setup-aws-account-envs/1-aws-control-tower-aft.mdx) I explained how I reduce costs when using AWS Control Tower services with the Account Factory for Terraform (AFT) approach, but only the costs I found using it for a few days. Now I\'m going to talk about the costs for the latest 3 months.\\n\\n### Latest 3 months costs:\\n\\nBefore I proceed, I have to mention my usage of AFT:\\n* I only used it during January and February. I created 5 AWS Accounts.\\n* On March I didn\'t create or enroll any account. This was on purpose to check what are the fixed costs of having AFT inactive, I knew some Control Tower policies created have fixed costs no matter if you use them or not. I will dive into it in the next sections.\\n\\nAnd here we have the costs:\\n\\n![latest 3 months costs](resources/costs-latest-3-months.png)\\n\\n| Service  | Config($) | VPC($) | Tax($) | EC2-Other($) | CodeBuild($) | KMS($) | Lambda($) | S3($) | DynamoDB($) | Backup($) | EC2-Instances($) | CloudWatch($) | Total cost ($) |\\n| -------- | --------: | -----: | -----: | -----------: | -----------: | -----: | --------: | ----: | ----------: | --------: | ---------------: | ------------: | -------------: |\\n| January  |     16.58 |  17.34 |  10.62 |         8.41 |         6.62 |   1.56 |      0.09 |  0.01 |        0.01 |      0.01 |             0.01 |          0.01 |           61.2 |\\n| February |      13.9 |   12.5 |  10.98 |         9.04 |          8.5 |   1.87 |      6.44 |  0.01 |        0.01 |      0.01 |             0.01 |          0.01 |          63.22 |\\n| March    |      9.03 |      0 |   4.72 |         7.44 |            0 |      6 |         0 |  0.01 |        0.01 |      0.01 |                0 |             0 |          27.19 |\\n\\n\\n:::info\\nLet\'s ignore the `Tax` from the plot and table.\\n:::\\n\\n### Detailed cost: Services, API Operations and Usages Type\\n\\nLet me write down the services used:\\n* AWS Config:\\n  * API Operation: `None` \\n  * Usage Type: `EU-ConfigurationItemRecorded`\\n* VPC: \\n  * API Operation: `VpcEndpoint` \\n  * Usage Type: `EU-VpcEndpoint-Hours`\\n* EC2-Other:\\n  * API Operations: `NatGateway`, `AssociateAddressVPC`, here are the costs:\\n  * Usage Type: `EU-NatGateway-Hours`,`EU-ElasticIP:IdleAddress`, `EU-NatGateway-Bytes`\\n\\n| API Operation | NatGateway($) | AssociateAddressVPC($) | Total |\\n| ------------- | ------------: | ---------------------: | ----: |\\n| January       |          7.28 |                   1.13 |  8.41 |\\n| February      |          7.02 |                   2.02 |  9.04 |\\n| March         |             0 |                   7.44 |  7.44 |\\n\\n| Usage Type | EU-NatGateway-Hours($) | EU-ElasticIP:IdleAddress($) | EU-NatGateway-Bytes($) |\\n| ---------- | ---------------------: | --------------------------: | ---------------------: |\\n| January    |                    7.2 |                       1.123 |                   0.08 |\\n| February   |                   6.24 |                       2.019 |                   0.78 |\\n| March      |                        |                       7.435 |                        |\\n\\n* CodeBuild: \\n  * API Operation: `Build`\\n  * Usage Type: `EU-Build-Min:Linux:g1.medium` (January), `EU-Build-Min:Linux:g1.small` (February). Each usage type is defined [here](https://aws.amazon.com/es/codebuild/pricing/) and it might from one month to another because a [release on the original github](https://github.com/aws-ia/terraform-aws-control_tower_account_factory/releases) that I forked.\\n* Key Management Service:\\n  * API Operation: `Unknown`\\n  * Usage Type: `eu-west-1-KMS-Keys`,`eu-west-2-KMS-Keys`\\n\\n| Usage Type | eu-west-1-KMS-Keys($) | eu-west-2-KMS-Keys($) | Total |\\n| ---------- | --------------------: | --------------------: | ----: |\\n| January    |                  1.06 |                   0.5 |  1.56 |\\n| February   |                  1.24 |                  0.63 |  1.87 |\\n| March      |                     4 |                     2 |     6 |\\n\\n* Lambda:\\n  * API Operation: `Invoke`\\n  * Usage Type: `EU-Lambda-GB-Second`\\n\\n\\n### Analysis\\n\\n* The only services that still cost without usage are:\\n  * AWS Config\\n  * EC2-Other\\n  * KMS\\n* AWS Config is the highest cost. I will talk about this in the next section: [aws config section](#what-aws-config-does-can-i-reduce-it-cost)\\n* There are no cost for  the services `CodeBuild` and  `Lambda`. This is because I haven\'t created nor enrolled any account in March.\\n* Using the improvement to disable the VPC endpoints and NAT explained in my [previous post](../1-setup-aws-account-envs/1-aws-control-tower-aft.mdx), in March the cost is 0 for the following operations:\\n  * `EU-VpcEndpoint-Hours` - service `VPC`\\n  * `EU-NatGateway-Hours` and `EU-NatGateway-Bytes` - service `EC2-Other`\\n* However, **there is still a cost in the `EC2-Other`** service, it is for the API Operation `AssociateAddressVPC` , usage type: `EU-ElasticIP:IdleAddress`. \\n* The **KMS cost has increase in March**. I didn\'t expect this one because I didn\'t use AFT during that month.\\n* Other services ( `S3` ,`DynamoDB` ,`Backup` ,`EC2-Instances` ,`CloudWatch` ) have no cost or less than 0.10.\\n\\n### Questions\\n\\n* What AWS Config does ? Can I reduce it cost ? \\n* What does the operation `EU-ElasticIP:IdleAddress` do? How can I decrease this cost? \\n* Why KMS cost increase in March if I didn\'t use AFT? How can I decrease it?\\n\\n\\n## What AWS Config does? Can I reduce it cost? \\n\\nAWS Config is a AWS service that allow us to record and evaluate resources configurations. You can check the full description [here](https://aws.amazon.com/config/?nc1=h_ls). \\nThis service is been used by the AWS Control Tower as described next:\\n\\nAWS Control Tower has a feature named [Guardrails](https://docs.aws.amazon.com/controltower/latest/userguide/guardrails.html), those are rules validated against resources created in enrolled accounts. This provides governance to AWS environments. \\nThose Guardrails can be preventive (ensuring your account maintain compliance) or Detective (detect noncompliance resources) based on the behavior. \\nThe detective guardrails are implemented using AWS Config rules. \\nThis means Control Tower call AWS Config to validate the configuration of the resources when a detective guardrails is active.\\n\\nokey, too much theory, the most importance, next are the two detective guardrails activated by default in a landing zone:\\n\\n![Guardrails detectives](resources/guardrails-default-detectives.png)\\n\\n:::danger\\nThe next approach works for me because I\'m using AFT sporadically and for personal projects. I don\'t recommend it for companies.\\n:::\\n\\nAction done: \\n1. Go to AWS Organizations. Create a OU, I name it `outside-act`.\\n2. Move the AFT account to the new OU.\\n3. Check it is not enrolled.\\n\\n![aws-ct-account-outside-ou](resources/aws-ct-account-outside-ou.png)\\n\\n4. Open the AWS Console, login using the AFT Account, go to AWS Config, open Settings, click on `Edit`. and select stop recording, save it.\\n\\n![aws-config-settings](resources/aws-config-settings.png)\\n![aws-config-settings-edit](resources/aws-config-settings-edit.png)\\n![aws-config-setting-recorder-off](resources/aws-config-setting-recorder-off.png)\\n\\n\\n![costs-after-disable-aws-config-recorder](resources/costs-after-disable-aws-config-recorder.png)\\n\\nAfter disabling Recorder on April 19 the cost was reduced from `0.30 $` per day to `0.03 $`\\n\\n| Service   | 2022-04-16 | 2022-04-17 | 2022-04-18 | 2022-04-19 | 2022-04-20 | 2022-04-21 | 2022-04-22 |\\n| --------- | ---------- | ---------- | ---------- | ---------- | ---------- | ---------- | ---------- |\\n| Config($) | 0.296      | **0.296**  | **0.236**  | **0.008**  | 0.008      | 0.008      | 0.008      |\\n\\n## What does the operation `EU-ElasticIP:IdleAddress` do? How can I decrease this cost? \\n\\nI discovered there were two Elastic IP addresses not linked to any EC2 instances, this is why it is been charged in Idle state. I release them manually, through the AWS Console, so no more cost is generated. More details about why it was been charge [here](https://aws.amazon.com/premiumsupport/knowledge-center/elastic-ip-charges/).\\n\\nAs we want to avoid manual intervention, I made the elastic IP creation depend on the `aft_vpc_nat_gateway` parameter I introduce for reducing NAT costs in my [previous post.](../1-setup-aws-account-envs/1-aws-control-tower-aft.mdx)\\n\\n![elastic-ip-modification](resources/elastic-ip-modification-in-tf.png)\\n\\n[Commit](https://github.com/cangulo-aws-aft/terraform-aws-control_tower_account_factory/commit/e11466b8e6beaf4364f0343b5d44f0939050dbf3)\\n\\n## KMS Costs\\n\\n:::info\\nI will answer this one in my next post. Too much for this one.\\n:::\\n\\n\\n## Side Notes: \\n\\n### Wait Carlos, were you using the Free Tier?\\n\\nYes, I was, and that might reduce the final costs I had, but I don\'t expect them to be significantly different nor to change any conclusion of this article. \\n\\nNext is my remaining Free Tier quota on April 18, as you see some services already exceeded the free layer though I haven\'t used the AFT resources since later February. \\n\\n![free tier stats](resources/free-tier-stats.png)\\n\\n### Audit and Log AWS Accounts costs\\n\\nFor using AWS Control Tower there are 3 accounts required:\\n* Audit Account.\\n* Log Archive Account.\\n* AFT Account where all the resources to process account creation request are.\\n\\nNext are the costs per account\\n\\n| Linked Account Name | cangulo_aft ($) | Log Archive ($) | Audit ($) |\\n| ------------------- | --------------- | --------------- | --------- |\\n| January             | 61.2            | 1.8             | 0.2       |\\n| February            | 63.3            | 1.5             | 0.02      |\\n| March               | 27.2            | 2.8             | 0.01      |\\n\\n\\n:::info\\n\\nIn this post I\'m only referring to the AFT account costs. \\n\\n:::\\n\\n## References:\\n\\n* [Starting with Control Tower](https://docs.aws.amazon.com/controltower/latest/userguide/getting-started-with-control-tower.html)\\n  * `If you are running ephemeral workloads from accounts in AWS Control Tower, you may see an increase in costs associated with AWS Config. Contact your AWS account representative for more specific information about managing these costs.`\\n* [control tower user guide](https://docs.aws.amazon.com/controltower/latest/userguide/guardrails.html)\\n  * `The detective guardrails are implemented using AWS Config rules`\\n\\n### Git Repositories\\n\\n[learn-terraform-aft-account-provisioning-customizations](https://github.com/hashicorp/learn-terraform-aft-account-provisioning-customizations)  \\n[learn-terraform-aft-account-customizations](https://github.com/hashicorp/learn-terraform-aft-account-customizations)  \\n[learn-terraform-aft-global-customizations](https://github.com/hashicorp/learn-terraform-aft-global-customizations)  \\n[learn-terraform-aft-account-request](https://github.com/hashicorp/learn-terraform-aft-account-request)"},{"id":"aws/1-aws-ct-aft-reduce-cost","metadata":{"permalink":"/blog/aws/1-aws-ct-aft-reduce-cost","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/aws/1-setup-aws-account-envs/1-aws-control-tower-aft.mdx","source":"@site/blog/posts/aws/1-setup-aws-account-envs/1-aws-control-tower-aft.mdx","title":"Reducing costs when using AWS Control Tower AFT","description":"This post explains some customizations I did to save costs when using AWS Control Tower after I follow the next article: Manage AWS Accounts Using Control Tower Account Factory for Terraform. I recommend you read it before continuing. Basic knowledge about AWS and Terraform is required.","date":"2022-01-22T00:00:00.000Z","formattedDate":"January 22, 2022","tags":[{"label":"aws","permalink":"/blog/tags/aws"},{"label":"projects","permalink":"/blog/tags/projects"},{"label":"accounts","permalink":"/blog/tags/accounts"},{"label":"setup","permalink":"/blog/tags/setup"}],"readingTime":4.25,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"not finished - AWS Control Tower AFT Costs","permalink":"/blog/aws/2-aws-ct-aft-costs"},"nextItem":{"title":"Interactive bookmarks menu v2","permalink":"/blog/bash/5-interactive-bookmarks-v2"}},"content":":::info\\nThis post explains some customizations I did to save costs when using AWS Control Tower after I follow the next article: [Manage AWS Accounts Using Control Tower Account Factory for Terraform](https://learn.hashicorp.com/tutorials/terraform/aws-control-tower-aft#create-aws-aft-organizational-unit-and-account). I recommend you read it before continuing. Basic knowledge about AWS and Terraform is required.\\n:::\\n\\n\x3c!--truncate--\x3e\\n\\n## Context\\n\\nWhenever I want to start a new project, I create an AWS account for each environment, I do it to separate domains and costs. So far, I have been doing this manually, but then I discover the Account Factory for Terraform (AFT) as part of the AWS Control Tower services. \\n\\nAFT defines a GitOps process to automatize the account creation and update. It is based on two main elements: \\n1. Git repositories where the account creation request and customizations are defined.\\n2. AWS resources used in the account creation/update process. All of them are based on the repository code. Some of them are CodePipeline, Dynamo tables, Lambdas, and Step Functions.\\n\\nI don\'t want to go into details, but I think it is worth mentioning that this automatization simplifies the whole process, not only because we avoid manual operations (that is always nice, right?), but because it allows us to align different AWS accounts.\\n\\nA customization example could be to define a Budget after creating the account. We can add a notification when we are close to a maximum amount (in fact, this was my main goal at first, to avoid any unexpected cost \ud83d\ude01). Next are other examples:\\n\\n* Create default resources like S3 buckets\\n* Add SSM parameters to describe the account\\n* Add custom policies\\n\\n:::info\\nI\'m not going to go into the customization details in this article. I just want to point out a few examples. I will explain it in a separate post in the future.\\n:::\\n\\n## Problem: Costs\\n\\nAFT does not have a cost itself, the cost depends [on the resources deployed and used](https://docs.aws.amazon.com/controltower/latest/userguide/aft-pricing.html). Next are the main costs per resource after a few days of using it:\\n\\n1. VPC Endpoints: [billed hourly](https://docs.aws.amazon.com/vpc/latest/privatelink/vpc-endpoints.html).\\n2. NatGateway.\\n\\nI found it in the Cost Explorer of my root account, grouping by API Operation:\\n\\n![costs](./resources/costs-using-aws-ct-aft.png)\\n\\n## Solution\\n\\n### Delete the VPC Endpoints when not used\\n\\nThe AFT repository ([terraform-aws-control_tower_account_factory](https://github.com/aws-ia/terraform-aws-control_tower_account_factory)) offers  the flag `aft_vpc_endpoints` to enable/disable the VPC Endpoints. As those are been billed hourly, it doesn\'t make sense to have them on if you are not using them. So, to save costs, only turn them on before requesting a new account, and once it is finished, turn them off. The idea is simple, let\'s see that in practice:\\n\\nThe basic TF code that creates the AFT infrastructure is:\\n\\n```terraform\\nmodule \\"aft\\" {\\n  source                      = \\"github.com/aws-ia/terraform-aws-control_tower_account_factory\\"\\n\\n  ct_management_account_id    = var.ct_management_account_id\\n  log_archive_account_id      = var.log_archive_account_id\\n  audit_account_id            = var.audit_account_id\\n  aft_management_account_id   = var.aft_management_account_id\\n  ct_home_region              = var.ct_home_region\\n  tf_backend_secondary_region = \\"us-west-2\\"\\n\\n  vcs_provider                                  = \\"github\\"\\n  account_request_repo_name                     = \\"${var.github_username}/learn-terraform-aft-account-request\\"\\n  global_customizations_repo_name               = \\"${var.github_username}/learn-terraform-aft-global-customizations\\"\\n  account_customizations_repo_name              = \\"${var.github_username}/learn-terraform-aft-account-customizations\\"\\n  account_provisioning_customizations_repo_name = \\"${var.github_username}/learn-terraform-aft-account-provisioning-customizations\\"\\n}\\n```\\n\\nOnce we have created the infrastructure by executing a `terraform apply`, the VPC endpoints are enabled by default, we process to send the account creation request (explained in the [tutorial](https://learn.hashicorp.com/tutorials/terraform/aws-control-tower-aft#create-aws-aft-organizational-unit-and-account)). Once it is finished, we set the `aft_vpc_endpoints` flag to false:\\n\\n```terraform {5}\\nmodule \\"aft\\" {\\n  source                      = \\"github.com/aws-ia/terraform-aws-control_tower_account_factory\\"\\n\\n  ...\\n\\n  aft_vpc_endpoints                             = false\\n}\\n```\\n\\nWe reexecute `terraform apply` and done! VPC endpoints deleted and costs reduced!\\n\\n### Delete the NAT related resources when not used\\n\\nMaybe, the first approach we think is to manually delete the NAT resources. Then, before queuing any account creation request, we use Terraform to recreate them. That might work, but it involves manual intervention on in the AWS Console for every request, we don\'t want that. \\n\\nSo, taking into account the AFT code is in a GitHub repository, I thought it was better to fork it and add a new flag to conditionally create the NAT resources. So, I did the next steps:\\n\\n1. I forked the AWS GH repo [aws-ia/terraform-aws-control_tower_account_factory](https://github.com/aws-ia/terraform-aws-control_tower_account_factory) in [cangulo-aws-aft/terraform-aws-control_tower_account_factory](https://github.com/cangulo-aws-aft/terraform-aws-control_tower_account_factory).\\n2. I created a new flag called `aft_vpc_nat_gateway` following the `aft_vpc_endpoints` model.\\n3. I modify the NAT resources to depend on the new flag. \\n\\nEverything is done in [this commit](https://github.com/cangulo-aws-aft/terraform-aws-control_tower_account_factory/commit/d8cfd2584f4cec37e1a91d213f823191cec201d3).\\n\\nThen, I simply update the \\"aft\\" module source to my fork and provide the new flag. Next is the result:\\n\\n```terraform {22}\\nmodule \\"aft\\" {\\n\\n  # source = \\"github.com/cangulo-aws-aft/terraform-aws-control_tower_account_factory\\" # repo in the cloud\\n\\n  # source                      = \\"github.com/cangulo-aws-aft/terraform-aws-control_tower_account_factory\\"\\n  source = \\"../terraform-aws-control_tower_account_factory\\" # repo in the same local path\\n\\n  ct_management_account_id    = var.ct_management_account_id\\n  log_archive_account_id      = var.log_archive_account_id\\n  audit_account_id            = var.audit_account_id\\n  aft_management_account_id   = var.aft_management_account_id\\n  ct_home_region              = var.ct_home_region\\n  tf_backend_secondary_region = var.tf_backend_secondary_region\\n\\n  vcs_provider                                  = \\"github\\"\\n  account_request_repo_name                     = \\"${var.github_username}/account-request\\"\\n  account_provisioning_customizations_repo_name = \\"${var.github_username}/account-provisioning-customizations\\"\\n  global_customizations_repo_name               = \\"${var.github_username}/global-customizations\\"\\n  account_customizations_repo_name              = \\"${var.github_username}/account-customizations\\"\\n\\n  aft_feature_delete_default_vpcs_enabled = false\\n  aft_vpc_aws_nat_gateway                 = false\\n  aft_vpc_endpoints                       = false\\n}\\n```\\n\\n### Reduced Costs\\n\\n![reduced-costs](./resources/reduced-costs.jpg)\\n\\nOn day 11, I deactivated the VPC Endpoints using the flag explained before, that is why there are still NAT costs. I deactivated it using the forked repository since day 12.\\n\\n## References:\\n\\n* Youtube Tutorial for setting up AWS Control Tower: [Enable AWS Control Tower for Existing Organizations](https://www.youtube.com/watch?v=CwRy0t8nfgM)  \\n* [Manage AWS Accounts Using Control Tower Account Factory for Terraform](https://learn.hashicorp.com/tutorials/terraform/aws-control-tower-aft#create-aws-aft-organizational-unit-and-account)  \\n* [Account Factory for Terraform](https://aws.amazon.com/blogs/aws/new-aws-control-tower-account-factory-for-terraform/)\\n\\n### Git Repositories\\n\\n[learn-terraform-aft-account-provisioning-customizations](https://github.com/hashicorp/learn-terraform-aft-account-provisioning-customizations)  \\n[learn-terraform-aft-account-customizations](https://github.com/hashicorp/learn-terraform-aft-account-customizations)  \\n[learn-terraform-aft-global-customizations](https://github.com/hashicorp/learn-terraform-aft-global-customizations)  \\n[learn-terraform-aft-account-request](https://github.com/hashicorp/learn-terraform-aft-account-request)"},{"id":"bash/5-interactive-bookmarks-v2","metadata":{"permalink":"/blog/bash/5-interactive-bookmarks-v2","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/bash/5-interactive-bookmarks-v2/5-interactive-bookmarks-v2.mdx","source":"@site/blog/posts/bash/5-interactive-bookmarks-v2/5-interactive-bookmarks-v2.mdx","title":"Interactive bookmarks menu v2","description":"In this post, I am going to improve the interactive bookmark I created in a previous post.","date":"2020-12-21T00:00:00.000Z","formattedDate":"December 21, 2020","tags":[{"label":"linux","permalink":"/blog/tags/linux"},{"label":"productivity","permalink":"/blog/tags/productivity"},{"label":"hack","permalink":"/blog/tags/hack"},{"label":"bash","permalink":"/blog/tags/bash"},{"label":"zsh","permalink":"/blog/tags/zsh"},{"label":"terminal","permalink":"/blog/tags/terminal"}],"readingTime":3.45,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Reducing costs when using AWS Control Tower AFT","permalink":"/blog/aws/1-aws-ct-aft-reduce-cost"},"nextItem":{"title":"How to use a repository for importing your bash scripts and shortcuts","permalink":"/blog/bash/4-create-config-repo"}},"content":"import Gif from \'/src/components/gif.js\'\\n\\nIn this post, I am going to improve the interactive bookmark I created in a [previous post](../1-interactive-bookmarks/1-interactive-bookmarks.mdx).\\n\\n\x3c!--truncate--\x3e\\n\\n## Requirements\\n* Linux (I\'m using [Elementary OS](https://elementary.io), a Ubuntu-based distro, try it!)\\n* [fzf](https://github.com/junegunn/fzf) command-line fuzzy finder\\n* Remember to add execution permissions to the scripts through `chmod +x`\\n* This article improves the interactive bookmark menu implemented in the previous post: [_Create an interactive bookmarks menu in your terminal_](../1-interactive-bookmarks/1-interactive-bookmarks.mdx)\\n\\n## Improvements introduced\\n\\n1. Add one directory layer\\n2. Open VS Code in the repository\\n\\n### Add one directory layer\\n\\nI have a global path for all the repositories I clone locally, it is `/home/cangulo/repos`. As I have a lot, I grouped them into folders per organization or custom name.\\n\\n| Organization/ custom name | Repository                        |\\n| ------------------------- | --------------------------------- |\\n| cangulo-actions           | cangulo.nuke.prcommitsvalidations |\\n| cangulo-actions           | cangulo.nuke.releasecreator       |\\n| cangulo-actions           | workflows                         |\\n| cangulo-nugets            | cangulo.changelog                 |\\n| cangulo-nugets            | cangulo.changelog.github.io       |\\n| cangulo-nugets            | cangulo.common.testing            |\\n| old-projects              | cangulo.build                     |\\n| old-projects              | cangulo.cicd                      |\\n| old-projects              | cangulo.cicd-gh-action            |\\n| temps                     | _any temporary repository_        |\\n\\nThe _organization / custom name_ will be the first layer, while the repositories are the second one. Next is the folder structure:\\n\\n```bash\\n\u251c\u2500\u2500 cangulo-actions\\n\u2502\xa0\xa0 \u251c\u2500\u2500 cangulo.nuke.prcommitsvalidations\\n\u2502\xa0\xa0 \u251c\u2500\u2500 cangulo.nuke.releasecreator\\n\u2502\xa0\xa0 \u2514\u2500\u2500 workflows\\n\u251c\u2500\u2500 cangulo-nugets\\n\u2502\xa0\xa0 \u251c\u2500\u2500 cangulo.changelog\\n\u2502\xa0\xa0 \u251c\u2500\u2500 cangulo.changelog.github.io\\n\u2502\xa0\xa0 \u2514\u2500\u2500 cangulo.common.testing\\n\u251c\u2500\u2500 old-projects\\n\u2502\xa0\xa0 \u251c\u2500\u2500 cangulo.build\\n\u2502\xa0\xa0 \u251c\u2500\u2500 cangulo.cicd\\n\u2502\xa0\xa0 \u2514\u2500\u2500 cangulo.cicd-gh-action\\n\u2514\u2500\u2500 temp\\n    \u251c\u2500\u2500 dotnet-docker\\n    \u2514\u2500\u2500 gsd\\n```\\n\\n### Open VS Code in the repository\\n\\nOnce I choose a repository, I would like to open it using VS Code. \\n\\n### Demo\\n\\n![goal](goal.gif)\\n\\n## Implementation\\n\\n```bash file=./code/listbookmarks.sh#L3- {4-7,12-17}\\n```\\n\\n<CaptionDocusaurus label=\\"listBookmarks function\\" linkIsRelative={true} link=\\"posts/bash/5-interactive-bookmarks-v2/code/listbookmarks.sh\\" />\\n\\nLet me write down the changes introduced:\\n\\n1. Bookmarks now have two properties: _name_ and _path_. \\n\\n```json file=code/bookmarks.json#L3-L6\\n```\\n\\n* name: string to identify the organization / custom name folder. Without spaces. e.g. for cangulo-actions -> Actions\\n* path: full path to first layer directories mentioned before.\\n\\n<details>\\n  <summary>Full Bookmark file</summary>\\n\\n```json file=code/bookmarks.json\\n```\\n\\n<CaptionDocusaurus label=\\"bookmarks\\" linkIsRelative={true} link=\\"posts/bash/5-interactive-bookmarks-v2/code/bookmarks.json\\" />\\n\\n\\n</details>\\n\\n2. The path to the bookmarks file is set in the environment variable `$BOOKMARKS_FILE`. We don\'t have it hardcoded in the function.\\n\\n```bash file=./code/listbookmarks.sh#L5 {1}\\n```\\n\\n3. I now use `jq` to query both attributes `(.[] | [.name,.path])` and output them in the columns `[\\"NAME\\", \\"PATH\\"]`  as a tab-separated-value `@tsv`:\\n\\n```bash file=./code/listbookmarks.sh#L5-L8\\n```\\n![jq-updated](jq-updated.png)\\n\\nProblem: columns are not aligned (see _oldprojects_ row)\\n\\n4. In order to align the `jq` output before piping it to `fzf`, I use the `column -t` command. [Reference](https://linux.die.net/man/1/column)\\n```bash file=./code/listbookmarks.sh#L5-L10 {5}\\n```\\n![column](column.png)\\n\\n5. Once a bookmark is selected, the full row is returned. I\\n\\n![fzf_return_full_row](fzf_return_full_row.gif)\\n\\nThen, I have to extract the path. First, I delete the repeated spaces (`tr -s \' \'`). Secondly, I choose the second column(`cut -f2 -d \' \'`). The `-d \' \'` parameter is to set columns delimiter to a whitespace.\\n\\n![trim-selection](trim-selection.png)\\n\\n5. I have created the function `lsf` to list the current directories using `fzf`, navigate to the one selected and execute a command provided as first parameter `$1`. In our case `code`. \\n\\n```bash file=./code/listbookmarks.sh#L27-L37 {8}\\n```\\n\\nPlease note the ` eval \\"\\\\$command .\\"` statement for executing the command provided.\\n\\n## Adding this to your Terminal Profile\\n\\nYou can add this into your Bash / Zsh profile. You can follow the next steps:\\n\\n1. Define your bookmarks in a json file following the _name,path_ model\\n2. In your profile, append its path in the `$BOOKMARKS_FILE` variable\\n3. Append the functions `listBookmarks` and `lsf`.\\n4. Append a call to the `listBookmarks` function at the end of the profile, so every time you open a terminal it execute it. \\n\\n## lsf function\\n\\nI just want to mention you can use the  `lsf` function separately to make navigation through directories faster. Also, remember it accepts as a parameter a command to execute in the directory selected. Give it a try and add import it in your profile.\\n\\n![lsf_faster_navigation](lsf_faster_navigation.gif)\\n\\n## Final Notes\\n\\nDo you see any other improvement to include? What commands would you provide when using `lsf` ? Share them in the comments below.\\n\\n<Gif id=\\"UtEUhkfriklonVdweC\\"  />"},{"id":"bash/4-create-config-repo","metadata":{"permalink":"/blog/bash/4-create-config-repo","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/bash/4-create-config-repo/4-create-config-repo.mdx","source":"@site/blog/posts/bash/4-create-config-repo/4-create-config-repo.mdx","title":"How to use a repository for importing your bash scripts and shortcuts","description":"In this post, I will explain how to load custom variables by reading a JSON file, this will be done every time we open a Terminal. I will also improve the shortcuts we create in the previous posts.","date":"2020-12-17T00:00:00.000Z","formattedDate":"December 17, 2020","tags":[{"label":"linux","permalink":"/blog/tags/linux"},{"label":"productivity","permalink":"/blog/tags/productivity"},{"label":"hack","permalink":"/blog/tags/hack"},{"label":"bash","permalink":"/blog/tags/bash"},{"label":"zsh","permalink":"/blog/tags/zsh"},{"label":"terminal","permalink":"/blog/tags/terminal"}],"readingTime":3.395,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Interactive bookmarks menu v2","permalink":"/blog/bash/5-interactive-bookmarks-v2"},"nextItem":{"title":"Load custom variables at Terminal startup","permalink":"/blog/bash/3-load-vars"}},"content":"import Gif from \'/src/components/gif.js\'\\nimport Tabs from \'@theme/Tabs\'\\nimport TabItem from \'@theme/TabItem\'\\n\\nIn this post, I will explain how to load custom variables by reading a JSON file, this will be done every time we open a Terminal. I will also improve the shortcuts we create in the previous posts.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info Template ready to use!\\nThe [cangulo-templates/linux-terminal-profile](https://github.com/cangulo-templates/linux-terminal-profile) repository contains a ready-to-use template based on this article.\\n:::\\n\\n## Requirements\\n* Linux (I\'m using [Elementary OS](https://elementary.io), a Ubuntu-based distro, try it!)\\n* [VS Code](https://code.visualstudio.com). If you don\'t want to use it, change all the `code` commands in the bash code for your text editor. Alternatives: _gedit_ or [gnome-text-editor](https://gitlab.gnome.org/GNOME/gnome-text-editor).\\n* [fzf](https://github.com/junegunn/fzf) command-line fuzzy finder\\n\\n\\n## Notes\\n* Remember to add execution permissions to the scripts through `chmod +x`\\n* Profile script: `$HOME/.bashrc` for bash terminal and `$HOME/.zshrc` for zsh \\n\\n## Problem\\n\\nSimplify, as much as possible, the process to set up my shortcuts every time I migrate to a new computer, personal or work. This process is: download and setups all my scripts in the Bash profile.\\n\\n## Idea\\n\\nRemember the concept _Behavior vs Configuration_ I explained in my [previous post](../3-load-vars/3-load-vars.mdx#behavior-vs-configuration)? We are going to continue using it \ud83d\ude01. Let me list down the main points:\\n\\n* Variables are stored in a JSON file. We want those variables to be available during all the terminal sessions.\\n* Functions depend on those variables, values that could change depending on the PC your use, for example paths, shouldn\'t be hard-coded.\\n* Both, variables and functions are added in the Bash Profile.\\n\\nNice, now that we have the main points, let me show the implementation.\\n\\n## Implementation\\n\\nFirst, we have the JSON file containing the variables:\\n\\n```json file=./code/1-profile-settings.json\\n```\\n\\nEach JSON key will be an environment variable, I prefer to define them in upper case to differentiate them from other variables we define during the terminal session.\\n\\nThen, in the bash profile we only have to do the next actions:\\n\\n1. Export the path to the JSON settings. My convention is to call this variable as `SETTINGS_FILE`.\\n2. Call a script to load all the variables and functions using the previous settings. Let\'s call this script `load-custom-profile.sh`.\\n\\nNext is the code for that. Please append it in your profile.\\n\\n```bash\\n# Update FULL_PATH_TO_JSON_SETTINGS with yours\\nexport SETTINGS_FILE=\\"FULL_PATH_TO_JSON_SETTINGS\\"\\nsource FULL_PATH/load-custom-profile.sh\\n```\\n\\nPlease note we use the `export` keyword, which sets `SETTINGS_FILE` as an environment variable. In that way, it will be available for other scripts. Please check this [link](https://www.baeldung.com/linux/bash-variables-export) for more details.\\n\\n### load-custom-profile.sh\\n\\nThis script should perform the next actions:\\n\\n* Verify `$SETTINGS_FILE` is defined and valid:\\n  * String is not empty\\n  * Path provided exists\\n* Read the JSON file and export the variables. The command is based on `jq` and `eval` as explained in my [previous post](../3-load-vars/3-load-vars.mdx) for more details. The main difference now is the use of the `export` command, following the pattern: `export KEY=\'VALUE\'`\\n\\n```bash file=./code/load-custom-profile.sh\\n```\\n\\nNext are the scripts stored in `$SCRIPTS_FOLDER`:\\n\\n* aliases:\\n\\n<Tabs>\\n  <TabItem value=\\"bash\\" label=\\"bash\\" default>\\n\\n```bash file=./code/scripts/aliases-bash.sh\\n```\\n<CaptionDocusaurus label=\\"aliases-bash.sh\\" linkIsRelative={true} link=\\"posts/bash/4-create-config-repo/code/scripts/aliases-bash.sh\\" />\\n\\n  </TabItem>\\n  <TabItem value=\\"zsh\\" label=\\"zsh\\">\\n\\n```bash file=./code/scripts/aliases-zsh.sh\\n```\\n<CaptionDocusaurus label=\\"aliases-zsh.sh\\" linkIsRelative={true} link=\\"posts/bash/4-create-config-repo/code/scripts/aliases-zsh.sh\\" />\\n\\n  </TabItem>\\n</Tabs>\\n\\n* functions:\\n\\n```bash file=./code/scripts/functions.sh\\n```\\n\\n* Bookmarks file referenced in the variable `BOOKMARKS_FILE` , and used in the `listBookmarks`  function:\\n\\n```json file=./code/2-bookmarks.json\\n```\\n\\n## Demo\\n\\n![demo](demo.gif)\\n\\n## Repository\\n\\nIf we store the settings and the implementations in a repository (e.g. GitHub) , we just need to reference them in the profile script the same way we have done so far:\\n\\n```bash\\n# Update LOCAL_REPO_FULL_PATH with yours\\nexport SETTINGS_FILE=\\"LOCAL_REPO_FULL_PATH/settings.local.json\\"\\nsource LOCAL_REPO_FULL_PATH/load-custom-profile.sh\\n```\\n\\nI recommend you to have a `settings.template.json` with the empty variables as next:\\n\\n```json file=./code/3-profile-settings.template.json\\n```\\n\\nIn that way, when you clone the repo locally, you duplicate it, rename copy to `settings.local.json`, and fill the values. Add it to your `gitignore` to avoid pushing it.\\n\\n## Final Notes\\n\\nwow, this post is the longest one I have done so far! Do you have another approach for importing scripts or settings? How would you do it? Let me know in the comments below.\\n\\n<Gif id=\\"d3mlE7uhX8KFgEmY\\" />"},{"id":"bash/3-load-vars","metadata":{"permalink":"/blog/bash/3-load-vars","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/bash/3-load-vars/3-load-vars.mdx","source":"@site/blog/posts/bash/3-load-vars/3-load-vars.mdx","title":"Load custom variables at Terminal startup","description":"In this post, I will explain how to import custom environment variables from a JSON file.","date":"2020-12-15T00:00:00.000Z","formattedDate":"December 15, 2020","tags":[{"label":"linux","permalink":"/blog/tags/linux"},{"label":"productivity","permalink":"/blog/tags/productivity"},{"label":"hack","permalink":"/blog/tags/hack"},{"label":"bash","permalink":"/blog/tags/bash"},{"label":"zsh","permalink":"/blog/tags/zsh"},{"label":"terminal","permalink":"/blog/tags/terminal"}],"readingTime":3.04,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"How to use a repository for importing your bash scripts and shortcuts","permalink":"/blog/bash/4-create-config-repo"},"nextItem":{"title":"Add shortcuts to your bash terminal","permalink":"/blog/bash/2-add-shortcuts"}},"content":"import Gif from \'/src/components/gif.js\'\\nimport Tabs from \'@theme/Tabs\'\\nimport TabItem from \'@theme/TabItem\'\\n\\nIn this post, I will explain how to import custom environment variables from a JSON file. \\nI will also improve the shortcuts we create in the previous posts.\\n\\n\x3c!--truncate--\x3e\\n\\n## Requirements\\n* Linux (I\'m using [Elementary OS](https://elementary.io), a Ubuntu-based distro, try it!)\\n* [VS Code](https://code.visualstudio.com). If you don\'t want to use it, change all the `code` commands in the bash code for your text editor. Alternatives: _gedit_ or [gnome-text-editor](https://gitlab.gnome.org/GNOME/gnome-text-editor).\\n* [fzf](https://github.com/junegunn/fzf) command-line fuzzy finder\\n\\n## Notes\\n* Remember to add execution permissions to the scripts through `chmod +x`\\n* Profile script: `$HOME/.bashrc` for bash terminal and `$HOME/.zshrc` for zsh \\n\\n## Variables\\n\\nLet\'s say I want to define some variables as:\\n\\n* my local github repositories path\\n* my documents path\\n* path to a specific file, in this case, the path to a JSON file containing some bookmarks I have, check my [previous post](../1-interactive-bookmarks/1-interactive-bookmarks.mdx)\\n\\nBy defining them in the profile script as:\\n\\n\\n```bash file=./code/1-declare-vars.sh#L3-\\n```\\n\\nWe can use them during the terminal session.\\n\\n![using the variables after loading the terminal](use-localrepo-variable.gif)\\n\\nLet\'s append the next function and aliases at the bash profile. Please note those are using the variables defined before.\\n\\n```bash file=./code/2-add-functions.sh#L3-\\n```\\n\\nNow, we can use them after opening the Terminal.\\n\\n![using the variables after loading the terminal](use-gotoRepos-function.gif)\\n\\n## Behavior vs Configuration\\n\\nIn [a previous post](../1-interactive-bookmarks/1-interactive-bookmarks.mdx), the `listBookmarks` function has the `bookmarksFile` hardcoded. \\n\\n```bash file=../1-interactive-bookmarks/code/listbookmarks.sh#L3-L4\\n```\\n\\nAs you see, its value refers to the `bookmarks.json` location. What happens if we move that file to another folder? We would have to update the function. For one variable this doesn\'t seem to be a problem, right? But what if it is hardcoded in more functions? we would have to update them all, that is not extensible!\\n\\nLet\'s define two terms here:\\n\\n* Behavior: Functions implementation.\\n* Configuration: Input parameters that the function relies on. In this case, `bookmarksFile`. \\n\\nBy setting all the parameters outside the functions, we are creating a central place for the configuration.\\n\\n```bash file=./code/1-declare-vars.sh#L4-\\n```\\n\\nAnd by calling those from the functions:\\n\\n```bash file=./code/2-add-functions.sh#L8-L9\\n```\\n\\nWe are **decoupling** configuration from behavior.  If we want to migrate or share this setup, we won\'t need to look at the function implementations, we would only need to update the parameters.\\n\\n<Gif id=\\"d3mlE7uhX8KFgEmY\\" />\\n\\n## One extra mile: Define the parameters as JSON\\n\\nLet\'s migrate the variables to a JSON file as follows. Please note all the paths are now absolute.\\n\\n```json file=./code/3-vars.json\\n```\\n\\nTo set the JSON keys as the parameters name we have to:\\n1. Define the json file path. We will consider those as the main settings.\\n2. Use the `jq` command to retrieve the keys and values.\\n3. Use the `eval` command to execute the `key=value`  for each one.\\n\\nNext is the solution, replace the variables declaration in your profile for this.\\n\\n```bash\\nsettingsFile=\\"/home/cangulo/repos/cangulo-blog/cangulo.github.io/blog/posts/bash/3-setup-custom-env-variables/code/3-vars.json\\"\\neval \\"$(jq -r \'to_entries | .[] | .key + \\"=\\" + (.value | @sh)\' <$settingsFile)\\"\\n```\\n\\n<details>\\n  <summary>In case you want to go into the solution details. Click here.</summary>\\n\\nReferences:\\n* Settings json keys as variables`jq`. [Link](https://unix.stackexchange.com/a/413886)\\n* What `@sh` means in `jq`. Quote string for bash. [Link](https://stedolan.github.io/jq/manual/)\\n\\n`jq -r \'to_entries\'`  structures the json as key/value pair array:\\n\\n![1-to_entries.png](./details/1-to_entries.png)\\n\\n`jq -r \'to_entries | .[]\'`  prepare the array items for the iteration:\\n\\n![2-iterate-over-array-items.png](./details/2-iterate-over-array-items.png)\\n\\n`jq -r \'to_entries | .[] | .key + \\"=\\" + .value\'` build the `key=value` expressions \\n\\n![3-build-variable-declaration-code.png](./details/3-build-variable-declaration-code.png)\\n\\n`jq -r \'to_entries | .[] | .key + \\"=\\" + (.value | @sh)\'` format the expression\\n![4-format-declaration.png](./details/4-format-declaration.png)\\n\\n</details>\\n\\nNothing more for Today! Do you think this is a good approach? How would you do it? Let me know in the comments below."},{"id":"bash/2-add-shortcuts","metadata":{"permalink":"/blog/bash/2-add-shortcuts","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/bash/2-add-shortcuts/2-add-shortcuts.mdx","source":"@site/blog/posts/bash/2-add-shortcuts/2-add-shortcuts.mdx","title":"Add shortcuts to your bash terminal","description":"In this post, I will define shortcuts in my bash terminal. The implementation is based on using aliases and functions. Super simple!","date":"2020-12-14T00:00:00.000Z","formattedDate":"December 14, 2020","tags":[{"label":"linux","permalink":"/blog/tags/linux"},{"label":"productivity","permalink":"/blog/tags/productivity"},{"label":"hack","permalink":"/blog/tags/hack"},{"label":"bash","permalink":"/blog/tags/bash"},{"label":"zsh","permalink":"/blog/tags/zsh"},{"label":"terminal","permalink":"/blog/tags/terminal"}],"readingTime":1.77,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Load custom variables at Terminal startup","permalink":"/blog/bash/3-load-vars"},"nextItem":{"title":"Create an interactive bookmarks menu in your terminal","permalink":"/blog/bash/1-interactive-bookmarks"}},"content":"import Gif from \'/src/components/gif.js\'\\nimport Tabs from \'@theme/Tabs\'\\nimport TabItem from \'@theme/TabItem\'\\n\\nIn this post, I will define shortcuts in my bash terminal. The implementation is based on using aliases and functions. Super simple!\\n\\n\x3c!--truncate--\x3e\\n\\n## Requirements\\n* Linux (I\'m using [Elementary OS](https://elementary.io), a Ubuntu-based distro, try it!)\\n* [VS Code](https://code.visualstudio.com). If you don\'t want to use it, change all the `code` commands in the bash code for your text editor. Alternatives: _gedit_ or [gnome-text-editor](https://gitlab.gnome.org/GNOME/gnome-text-editor).\\n* Remember to add execution permissions to the scripts through `chmod +x`\\n\\n## Aliases\\n\\nYou can create **aliases** to avoid type long commands. Next are some examples:\\n\\n\\n<Tabs>\\n  <TabItem value=\\"bash\\" label=\\"bash\\" default>\\n\\n```bash file=./code/scripts/aliases-bash.sh#L3-\\n```\\n<CaptionDocusaurus label=\\"aliases-bash.sh\\" linkIsRelative={true} link=\\"posts/bash/2-add-shortcuts/code/scripts/aliases-bash.sh\\" />\\n\\n  </TabItem>\\n  <TabItem value=\\"zsh\\" label=\\"zsh\\">\\n\\n```bash file=./code/scripts/aliases-zsh.sh#L3-\\n```\\n<CaptionDocusaurus label=\\"aliases-zsh.sh\\" linkIsRelative={true} link=\\"posts/bash/2-add-shortcuts/code/scripts/aliases-zsh.sh\\" />\\n\\n  </TabItem>\\n</Tabs>\\n\\n![goToReposExecution](goToReposExecution.gif)\\n\\nPlease note `$HOME` is an environment variable defined by the system, it refers to your home path, in my case `/home/carlos`.\\n\\n## Functions\\n\\nYou can also define functions as shortcuts for daily tasks. I have the next ones:\\n\\n```bash file=./code/scripts/functions.sh\\n```\\n_No need to focus on the implementation, I just want to point out some examples._\\n\\n![functionsExecution](functionsExecution.gif)\\n\\n## How to integrate those shortcuts in the bash terminal?\\n\\nIn order to load the shortcuts every time we open a terminal, we have to append them in the shell profile (`$HOME/.bashrc` for bash terminal, and `$HOME/.zshrc` for zsh). \\n\\nHowever, the profile script will become bigger for every new shortcut we add, to make this extensible we will _source_ ([load](https://linuxize.com/post/bash-source-command/)) the shortcuts from separate scripts. Let me list them:\\n\\n1. `alias-bash.sh.sh` /  `alias-zsh.sh`\\n2. `functions.sh`\\n\\nAppend the next code to your profile:\\n\\n```bash file=./code/sourceScripts.sh\\n```\\n\\n<details>\\n  <summary>Some notes about loading the functions:</summary>\\n\\nif you want to use the functions in scripts that you call manually from the terminal, you have to `export` them as next:\\n\\n<Tabs>\\n  <TabItem value=\\"bash\\" label=\\"bash\\" default>\\n\\n```bash\\nfuncName(){\\n\\n}\\nexport -f funcName\\n```\\n\\n  </TabItem>\\n  <TabItem value=\\"zsh\\" label=\\"zsh\\">\\n\\n```bash\\nfuncName(){\\n\\n}\\nexport funcName\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\n[reference](https://www.baeldung.com/linux/bash-variables-export)\\n\\n</details>\\n\\nNothing else! I hope this saves you some time using the terminal. Do you have similar shortcuts? Share them in the comments below.\\n\\n\\n<Gif id=\\"ZVik7pBtu9dNS\\"  />"},{"id":"bash/1-interactive-bookmarks","metadata":{"permalink":"/blog/bash/1-interactive-bookmarks","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/bash/1-interactive-bookmarks/1-interactive-bookmarks.mdx","source":"@site/blog/posts/bash/1-interactive-bookmarks/1-interactive-bookmarks.mdx","title":"Create an interactive bookmarks menu in your terminal","description":"In this post, I am going to implement an interactive bookmarks menu using fzf in bash Terminal.","date":"2020-12-11T00:00:00.000Z","formattedDate":"December 11, 2020","tags":[{"label":"linux","permalink":"/blog/tags/linux"},{"label":"productivity","permalink":"/blog/tags/productivity"},{"label":"hack","permalink":"/blog/tags/hack"},{"label":"bash","permalink":"/blog/tags/bash"},{"label":"zsh","permalink":"/blog/tags/zsh"},{"label":"terminal","permalink":"/blog/tags/terminal"}],"readingTime":2.275,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Add shortcuts to your bash terminal","permalink":"/blog/bash/2-add-shortcuts"},"nextItem":{"title":"How to use the PowerShell Profile to be more productive","permalink":"/blog/ps-profile-productive"}},"content":"import Gif from \'/src/components/gif.js\'\\n\\nIn this post, I am going to implement an interactive bookmarks menu using fzf in bash Terminal.\\n\\n\x3c!--truncate--\x3e\\n\\n## Requirements\\n* Linux (I\'m using [Elementary OS](https://elementary.io), a Ubuntu-based distro, try it!)\\n* [fzf](https://github.com/junegunn/fzf) command-line fuzzy finder\\n* Remember to add execution permissions to the scripts through `chmod +x`\\n\\n## Demo\\n\\n![goal](goal.gif)\\n\\nAs you see, every time I call `listBookmarks` the following paths are listed interactively:\\n* /home/cangulo/repos/cangulo-tf\\n* /home/cangulo/repos/cangulo-nuke\\n\\nI can move through them using the up/down keys, and navigate into by pressing Enter.\\n\\nOn the other hand, in case similar paths are listed, I can filter by typing keywords.\\n\\n![goal](demo_filter.gif)\\n\\n## Implementation\\n\\n```bash file=./code/listbookmarks.sh\\n```\\n\\n<CaptionDocusaurus label=\\"listBookmarks function\\" linkIsRelative={true} link=\\"posts/bash/1-interactive-bookmarks/code/listbookmarks.sh\\" />\\n\\nLet me define the basic structure:\\n1. Read the paths (i.e. _bookmarks_)\\n2. List them in an interactive way\\n3. Once a bookmark is selected, navigate to it\\n\\nNow let\'s dive into the details:\\n\\n### 1. Read the bookmarks\\nFirst, in order to make this extensible, the paths are listed in a JSON file:\\n\\n```json file=code/bookmarks.json\\n```\\n\\n<CaptionDocusaurus label=\\"bookmarks\\" linkIsRelative={true} link=\\"posts/bash/1-interactive-bookmarks/code/bookmarks.json\\" />\\n\\nWe can print the file content using `cat`, and then use `jq` to query the array items. \\n\\n`cat $bookmarksFile  | jq -r \'.[]\'`\\n\\n<details>\\n    <summary>Why I\'m using a JSON file instead of a simple text file. Click here for the answer:</summary>\\n\\nIt is because in the article [Interactive bookmarks menu v2](../5-interactive-bookmarks-v2/5-interactive-bookmarks-v2.mdx) I will add new features with more advanced bookmarks \ud83d\ude01\\n</details>\\n\\n### 2. List the bookmarks\\n\\nHere is where `fzf` comes up. Anything that `fzf`  receives is listed interactively. In this case, we pipe the `jq` result to `fzf`, so the bookmarks are listed as shown in the [demo](#demo) section.\\n\\n`cat $bookmarksFile | jq -r \'.[]\' | fzf`\\n\\n### 3. Once a bookmark is selected, navigate to it\\n\\n`fzf` returns the path selected, we save it to a variable.\\n\\n`local pathSelected=$(cat $bookmarksFile | jq -r \'.[]\' | fzf)`\\n\\nLast, we check if it is not empty (`-n`) before moving into:\\n\\n```bash\\nif [[ -n \\"$pathSelected\\" ]]; then\\n    cd $pathSelected\\nelse\\n    echo \\"no bookmark selected\\"\\nfi\\n```\\n## Bonus: execute this every time you open a terminal\\nYou have to add this in your bash or zsh profile (_.bashrc_, _.zshrc_ ). Just append the `listBookmarks` implementation at the end, update the `bookmarksFile` variable to be a full path, and call the function.\\n\\n```bash\\nlistBookmarks() {\\n    local bookmarksFile=\'YOUR_PATH/bookmarks.json\'\\n    local pathSelected=$(cat $bookmarksFile |\\n        jq -r \'.[]\' |\\n        fzf)\\n\\n    if [[ -n \\"$pathSelected\\" ]]; then\\n        cd $pathSelected\\n    else\\n        echo \\"no bookmark selected\\"\\n    fi\\n}\\n\\nlistBookmarks\\n```\\n\\nAnd that is all! I hope this saves you some time using the terminal. Do you find this useful? Do you have similar functions? Let me know in the comments below.\\n\\n<Gif id=\\"xUPOqo6E1XvWXwlCyQ\\"  />"},{"id":"ps-profile-productive","metadata":{"permalink":"/blog/ps-profile-productive","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/powershell/configuring-powershell-profile/configuring-powershell-profile.mdx","source":"@site/blog/posts/powershell/configuring-powershell-profile/configuring-powershell-profile.mdx","title":"How to use the PowerShell Profile to be more productive","description":"In this post, I will explain how to set up shortcuts in the PowerShell Profile. Everything in this article works for PowerShell 5.1 and later.","date":"2020-08-24T00:00:00.000Z","formattedDate":"August 24, 2020","tags":[{"label":"windows10","permalink":"/blog/tags/windows-10"},{"label":"productivity","permalink":"/blog/tags/productivity"},{"label":"hack","permalink":"/blog/tags/hack"},{"label":"powershell","permalink":"/blog/tags/powershell"}],"readingTime":2.85,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Create an interactive bookmarks menu in your terminal","permalink":"/blog/bash/1-interactive-bookmarks"}},"content":"In this post, I will explain how to set up shortcuts in the PowerShell Profile. Everything in this article works for PowerShell 5.1 and later.\\n\\n\x3c!--truncate--\x3e\\n\\n\\nIf you are a PowerShell (a.k.a. PS) user, I\'m sure at some point you repeat operations as navigating to a specific folder (e.g. your local GitHub repository). Maybe you run a script to clean or prepare your environment. Let\'s define those two scenarios as next:\\n\\n1. Go to your local git repository folder.\\n   - Code to execute: `cd .\\\\source\\\\repos\\\\`\\n2. Execute a script.\\n   - Code to execute: `$HOME\\\\source\\\\repos\\\\TaskManager\\\\startTaskManagerScript.ps1`\\n\\n## What is the PS Profile?\\n\\nThe PS Profile is a script that is run when the console starts, setting custom user settings as variables, aliases or functions. We can also use it to execute custom commands to prepare our local environment. Check your `$Profile` variable to know where your profile is stored.\\n\\n![Profile variables](./2020-08-26-configuring-powershell-profile/Profile-variable.png)\\n\\n## Shortcuts\\n\\nThe shortcuts we are going to set are functions or aliases depending on the following situations:\\n\\n1. For a command with static parameters, we will write functions. For example, `goToRepos` as a shortcut for `cd $HOME\\\\source\\\\repos`. The code will be:\\n\\n`function NAME { COMMAND_WITH_PARAMS }` -> `function goToRepos { cd $HOME\\\\source\\\\repos }`\\n\\n2. We will define an alias for frequently used commands which we call with different parameters. For example, we use `Select-String` to filter file content as next:\\n\\n```powershell\\nSelect-String [-Pattern] PATTERN [-Path] PATH\\n```\\n\\n![](ss-executed.png)\\n\\nInstead of writing `Select-String`, we could write `ss`. Next is the alias:\\n\\n`New-Alias -Name ALIAS -Value COMMAND` -> `New-Alias -Name ss -Value Select-String`\\n\\nIn our case, we want to avoid typing the full _startTaskManagerScript_, so we set that path as COMMAND.\\n\\n`New-Alias -Name startTaskManagerAPI -Value $HOME\\\\source\\\\repos\\\\TaskManager\\\\startTaskManagerScript.ps1`\\n\\n### Creating the profile\\n\\nLet\'s create and open the PS profile, execute the following command in PS: `code $PROFILE`, you should see the code editor empty. Considering that both commands share the `$HOME\\\\source\\\\repos` path, we could define a variable to short them as next:\\n\\n```powershell\\n# Variables\\n\\n$localRepo = $HOME + \'\\\\source\\\\repos\'\\n\\n# Functions\\n\\nfunction goToRepos { cd $localRepo }\\n\\n# Alias\\n\\nNew-Alias -Name startTaskManagerAPI -Value $localRepo\\\\TaskManager\\\\startTaskManagerScript.ps1\\n```\\n\\nPlease note the `$localrepo` variable will be available during the PS session. This means you can use it anytime, just as the variable `$HOME`. Paste the previous code into your profile and save it.\\n\\nOpen a new PS window. Maybe the next error will show up:\\n\\n![Problem Signature Profile](./2020-08-26-configuring-powershell-profile/digitally-signed-problem.png)\\n\\nThat is because PS has an execution policy that only accepts signed scripts (`AllSigned`). We need to change it to `RemoteSigned` to verify the signature for remote scripts, but not locals. We have to do it using the following command:\\n\\n`Set-ExecutionPolicy RemoteSigned -Scope CurrentUser`. Now we are good to go, open a new PS and try to execute the shortcuts we defined. \\n\\n\\n![Shortcuts execution](./2020-08-26-configuring-powershell-profile/shortcuts-execution.png)\\n\\n:::tip use the autocomplete feature!\\nYou don\'t need to write your aliases or functions completely. Just type the initial part and press `tab`.\\n:::\\n\\nAnd we\'re done! I hope this helps you to save time when using PS. Do you know any other tweak to be more productive? Feel free to share it in the comments!\\n\\n\\n## References\\n\\n* [PowerShell Profiles Reference for PS 5.1](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-5.1)\\n* [Profiles Files in PS 5.1](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-5.1#the-profile-files)\\n* [Example 4: Create an alias to an executable file](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-5.1#example-4--create-an-alias-to-an-executable-file)\\n* [Example 5: Create an alias for a command with parameters](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-5.1#example-4--create-an-alias-to-an-executable-file)\\n* [How to sign PowerShell profile w/ self-signed certificate?](https://www.tenforums.com/general-support/107659-how-sign-powershell-profile-w-self-signed-certificate.html)\\n* [Signing PowerShell Scripts](https://www.hanselman.com/blog/SigningPowerShellScripts.aspx)"}]}')}}]);