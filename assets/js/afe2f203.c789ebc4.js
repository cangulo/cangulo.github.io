"use strict";(self.webpackChunkcangulo_github_io=self.webpackChunkcangulo_github_io||[]).push([[7955],{3004:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"bash/2-add-shortcuts","metadata":{"permalink":"/blog/bash/2-add-shortcuts","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/bash/2-add-shortcuts/customize-bash-terminal.mdx","source":"@site/blog/posts/bash/2-add-shortcuts/customize-bash-terminal.mdx","title":"Add shortcuts to your bash terminal","description":"In this post, I will add shortcuts and other cool features to my bash terminal.","date":"2020-12-14T00:00:00.000Z","formattedDate":"December 14, 2020","tags":[{"label":"linux","permalink":"/blog/tags/linux"},{"label":"productivity","permalink":"/blog/tags/productivity"},{"label":"hack","permalink":"/blog/tags/hack"},{"label":"bash","permalink":"/blog/tags/bash"},{"label":"zsh","permalink":"/blog/tags/zsh"},{"label":"terminal","permalink":"/blog/tags/terminal"}],"readingTime":1.795,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"nextItem":{"title":"Load specific variables at Terminal startup","permalink":"/blog/bash/3-setup-custom-env-vars"}},"content":"import { CaptionDocusaurus, ShareDocusaurus } from \'@cangulo-blog/components\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport Gif from \'/src/components/gif.js\'\\nimport AboutMe from \'@cangulo-blog/components/dist/mdx/aboutme_area.mdx\'\\nimport Tabs from \'@theme/Tabs\'\\nimport TabItem from \'@theme/TabItem\'\\n\\nIn this post, I will add shortcuts and other cool features to my bash terminal.\\n\\n\x3c!--truncate--\x3e\\n\\n## Requirements\\n* Linux (I\'m using [Elementary OS](https://elementary.io), a Ubuntu-based distro, check it!)\\n* [VS Code](https://code.visualstudio.com). If you don\'t want to use it, change all the `code` commands in the bash code for your text editor. Alternatives: _gedit_ or [gnome-text-editor](https://gitlab.gnome.org/GNOME/gnome-text-editor).\\n* Remember to add execution permissions to the scripts through `chmod +x`\\n\\n## Aliases\\n\\nYou can create **aliases** to avoid type long commands. Next are some examples:\\n\\n\\n<Tabs>\\n  <TabItem value=\\"bash\\" label=\\"bash\\" default>\\n\\n```bash file=./code/scripts/aliases-bash.sh#L3-\\n```\\n<CaptionDocusaurus label=\\"aliases-bash.sh\\" linkIsRelative={true} link=\\"posts/bash/2-add-shortcuts/code/scripts/aliases-bash.sh\\" />\\n\\n  </TabItem>\\n  <TabItem value=\\"zsh\\" label=\\"zsh\\">\\n\\n```bash file=./code/scripts/aliases-zsh.sh#L3-\\n```\\n<CaptionDocusaurus label=\\"aliases-zsh.sh\\" linkIsRelative={true} link=\\"posts/bash/2-add-shortcuts/code/scripts/aliases-zsh.sh\\" />\\n\\n  </TabItem>\\n</Tabs>\\n\\n![goal](goToReposExecution.gif)\\n\\nPlease note `$HOME` is an environment variable defined by the system, it refers to your home path, in my case `/home/carlos`.\\n\\n## Functions\\n\\nYou can also define functions as shortcuts for daily tasks. I have the next ones:\\n\\n```bash file=./code/scripts/functions.sh\\n```\\n\\n## How to integrate those shortcuts in the bash terminal?\\n\\nIn order to load the shortcuts every time we open a terminal, we have to append them in the shell profile (`$HOME/.bashrc` for bash terminal, and `$HOME/.zshrc` for zsh). \\n\\nHowever, the profile script will become bigger for every new shortcut we add, to make this extensible we will _source_ ([load](https://linuxize.com/post/bash-source-command/)) the shortcuts from separate scripts. Let me list them:\\n\\n1. `alias-bash.sh.sh` /  `alias-zsh.sh`\\n2. `functions.sh`\\n\\nAppend the next code to your profile:\\n\\n```bash file=./code/sourceScripts.sh\\n```\\n\\n<details>\\n  <summary>Some notes about loading the functions:</summary>\\n\\nif you want to use the functions in scripts that you call manually from the terminal, you have to `export` them as next:\\n\\n<Tabs>\\n  <TabItem value=\\"bash\\" label=\\"bash\\" default>\\n\\n```bash\\nfuncName(){\\n\\n}\\nexport -f funcName\\n```\\n\\n  </TabItem>\\n  <TabItem value=\\"zsh\\" label=\\"zsh\\">\\n\\n```bash\\nfuncName(){\\n\\n}\\nexport funcName\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\n[reference](https://www.baeldung.com/linux/bash-variables-export)\\n\\n</details>\\n\\nNothing else! I hope this saves you some time using the terminal. Do you have similar shortcuts? Share them in the comments below.\\n\\n\\n<Gif id=\\"ZVik7pBtu9dNS\\"  />\\n\\n<AboutMe/>\\n\\n<ShareDocusaurus \\n  slug=\\"posts/bash/2-add-shortcuts\\" \\n  title=\\"Add shortcuts to your bash terminal\\"\\n  tags={[\\"linux\\",\\"productivity\\",\\"hack\\",\\"bash\\",\\"zsh\\",\\"terminal\\"]} />\\n\\n<Comments />"},{"id":"bash/3-setup-custom-env-vars","metadata":{"permalink":"/blog/bash/3-setup-custom-env-vars","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/bash/3-setup-custom-env-variables/customize-bash-terminal.mdx","source":"@site/blog/posts/bash/3-setup-custom-env-variables/customize-bash-terminal.mdx","title":"Load specific variables at Terminal startup","description":"In this post, I will explain how to load custom variables by reading a JSON file, this will be done every time we open a Terminal. I will also improve the shortcuts we create in the previous posts.","date":"2020-12-14T00:00:00.000Z","formattedDate":"December 14, 2020","tags":[{"label":"linux","permalink":"/blog/tags/linux"},{"label":"productivity","permalink":"/blog/tags/productivity"},{"label":"hack","permalink":"/blog/tags/hack"},{"label":"bash","permalink":"/blog/tags/bash"},{"label":"zsh","permalink":"/blog/tags/zsh"},{"label":"terminal","permalink":"/blog/tags/terminal"}],"readingTime":2.865,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Add shortcuts to your bash terminal","permalink":"/blog/bash/2-add-shortcuts"},"nextItem":{"title":"Create an interactive bookmarks menu in your terminal","permalink":"/blog/bash/1-interactive-bookmarks"}},"content":"import { CaptionDocusaurus, ShareDocusaurus } from \'@cangulo-blog/components\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport Gif from \'/src/components/gif.js\'\\nimport AboutMe from \'@cangulo-blog/components/dist/mdx/aboutme_area.mdx\'\\nimport Tabs from \'@theme/Tabs\'\\nimport TabItem from \'@theme/TabItem\'\\n\\nIn this post, I will explain how to load custom variables by reading a JSON file, this will be done every time we open a Terminal. I will also improve the shortcuts we create in the previous posts.\\n\\n\x3c!--truncate--\x3e\\n\\n## Requirements\\n* Linux (I\'m using [Elementary OS](https://elementary.io), a Ubuntu-based distro, check it!)\\n* [VS Code](https://code.visualstudio.com). If you don\'t want to use it, change all the `code` commands in the bash code for your text editor. Alternatives: _gedit_ or [gnome-text-editor](https://gitlab.gnome.org/GNOME/gnome-text-editor).\\n* [fzf](https://github.com/junegunn/fzf) command-line fuzzy finder\\n\\n## Notes\\n* Remember to add execution permissions to the scripts through `chmod +x`\\n* Profile script: `$HOME/.bashrc` for bash terminal and `$HOME/.zshrc` for zsh \\n\\n## Variables\\n\\nLet\'s say I want to define some variables as:\\n\\n* my local github repositories path\\n* my documents path\\n* path to a specific file, in this case, the path to a JSON file containing some bookmarks I have, check my [previous post](../1-interactive-bookmarks/interactive-bookmarks.mdx)\\n\\nThen, we define them in the profile script as:\\n\\n\\n```bash file=./code/1-declare-vars.sh#L3-\\n```\\n\\nNow we can use them during the terminal session as well as from any defined function. \\n\\n![using the variables after loading the terminal](use-localrepo-variable.gif)\\n\\nLet\'s append the next function and alias at the bash profile. Please note those are using the variables defined before.\\n\\n```bash file=./code/2-add-functions.sh#L3-\\n```\\n\\nNow, we can use them after opening the Terminal.\\n\\n![using the variables after loading the terminal](use-gotoRepos-function.gif)\\n\\n## Behavior vs Configuration\\n\\n* Behavior: Functions as `listBookmarks`\\n* Configuration: Parameters as `bookmarksFile` used in the functions.\\n\\nIf we change the bookmarks location, should we change the `listBookmarks` function ? I think not, we should decouple the configuration from the behavior as much as possible, otherwise we depend on hardcoded values along the functions making it hard to maintain. \\n\\nOn the other hand, I think having a central location for all the parameters is much cleaner, if want to migrate  or share your current setup, you only need to copy the functions and update the parameters. Otherwise, you will have to go function-by-function updating the parameters. \\n\\n<Gif id=\\"d3mlE7uhX8KFgEmY\\"  />\\n\\n## One extra mile: Define the parameters as JSON\\n\\nLet\'s migrate the variables to a json file as follows:\\n\\n\\n```JSON file=./code/3-vars.json\\n```\\n\\nTo set the json keys as the parameters name we have to:\\n1. Define the path to the json file. We will consider those as the main settings. \\n2. Use the `jq` command to retrieve the keys and values.\\n3. Use the `eval` command to execute the `key=value`  for each one.\\n\\nNext is the solution, replace the variables declaration in your profile for this.\\n\\n```bash\\nsettingsFile=\\"/home/cangulo/repos/cangulo-blog/cangulo.github.io/blog/posts/bash/3-setup-custom-env-variables/code/3-vars.json\\"\\neval \\"$(jq -r \'to_entries | .[] | .key + \\"=\\" + (.value | @sh)\' <$settingsFile)\\"\\n```\\n\\n<details>\\n  <summary>In case you want to go into details in the solution. Click here.</summary>\\n\\nReferences:\\n* Settings json keys as variables`jq`. [Link](https://unix.stackexchange.com/a/413886)\\n* What `@sh` means in `jq`. Quote string for bash. [Link](https://stedolan.github.io/jq/manual/)\\n\\n`jq -r \'to_entries\'`  structures the json as key/value pair array:\\n\\n![1-to_entries.png](./details/1-to_entries.png)\\n\\n`jq -r \'to_entries | .[]\'`  prepare the array items for the iteration:\\n\\n![2-iterate-over-array-items.png](./details/2-iterate-over-array-items.png)\\n\\n`jq -r \'to_entries | .[] | .key + \\"=\\" + .value\'` build the `key=value` expressions \\n\\n![3-build-variable-declaration-code.png](./details/3-build-variable-declaration-code.png)\\n\\n`jq -r \'to_entries | .[] | .key + \\"=\\" + (.value | @sh)\'` format the expression\\n![4-format-declaration.png](./details/4-format-declaration.png)\\n\\n</details>\\n\\n\\n\\n<AboutMe/>\\n\\n<ShareDocusaurus \\n  slug=\\"posts/bash/2-add-shortcuts\\" \\n  title=\\"Add shortcuts to your bash terminal\\"\\n  tags={[\\"linux\\",\\"productivity\\",\\"hack\\",\\"bash\\",\\"zsh\\",\\"terminal\\"]} />\\n\\n<Comments />"},{"id":"bash/1-interactive-bookmarks","metadata":{"permalink":"/blog/bash/1-interactive-bookmarks","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/bash/1-interactive-bookmarks/interactive-bookmarks.mdx","source":"@site/blog/posts/bash/1-interactive-bookmarks/interactive-bookmarks.mdx","title":"Create an interactive bookmarks menu in your terminal","description":"In this post, I am going to implement an interactive bookmarks menu using fzf.","date":"2020-12-11T00:00:00.000Z","formattedDate":"December 11, 2020","tags":[{"label":"linux","permalink":"/blog/tags/linux"},{"label":"productivity","permalink":"/blog/tags/productivity"},{"label":"hack","permalink":"/blog/tags/hack"},{"label":"bash","permalink":"/blog/tags/bash"},{"label":"zsh","permalink":"/blog/tags/zsh"},{"label":"terminal","permalink":"/blog/tags/terminal"}],"readingTime":2.39,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Load specific variables at Terminal startup","permalink":"/blog/bash/3-setup-custom-env-vars"},"nextItem":{"title":"How to use the PowerShell Profile to be more productive","permalink":"/blog/ps-profile-productive"}},"content":"import { CaptionDocusaurus, ShareDocusaurus } from \'@cangulo-blog/components\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport Gif from \'/src/components/gif.js\'\\nimport AboutMe from \'@cangulo-blog/components/dist/mdx/aboutme_area.mdx\'\\n\\nIn this post, I am going to implement an interactive bookmarks menu using fzf.\\n\\n\x3c!--truncate--\x3e\\n\\n## Requirements\\n* Linux (I\'m using [Elementary OS](https://elementary.io), a Ubuntu-based distro, check it!)\\n* [fzf](https://github.com/junegunn/fzf) command-line fuzzy finder\\n* Remember to add execution permissions to the scripts through `chmod +x`\\n\\n## Demo\\n\\n![goal](goal.gif)\\n\\nAs you see, every time I call the function `listBookmarks` the following paths are listed interactively. \\n* /home/cangulo/repos/cangulo-tf\\n* /home/cangulo/repos/cangulo-nuke\\n\\nI can move through them using the up/down keys, and navigate into by pressing Enter.\\n\\nOn the other hand, in case similar paths are listed, I can filter by typing keywords.\\n\\n![goal](demo_filter.gif)\\n\\n## Implementation\\n\\n```bash file=./code/listbookmarks.sh\\n```\\n\\n<CaptionDocusaurus label=\\"listBookmarks function\\" linkIsRelative={true} link=\\"posts/bash/1-interactive-bookmarks/code/listbookmarks.sh\\" />\\n\\nLet me define the basic structure:\\n1. Read the paths (let\'s call them _bookmarks_)\\n2. List them in an interactive way\\n3. Once a bookmark is selected, navigate to it\\n\\nNow let\'s dive into the details:\\n\\n### 1. Read the bookmarks\\nFirst, in order to make this extensible, the paths are listed in a JSON file:\\n\\n```json file=code/bookmarks.json\\n```\\n\\n<CaptionDocusaurus label=\\"bookmarks\\" linkIsRelative={true} link=\\"posts/bash/1-interactive-bookmarks/code/bookmarks.json\\" />\\n\\nWe can print the file content using `cat`, and then use `jq` to query the array items. \\n\\n`cat $bookmarksFile  | jq -r \'.[]\'`\\n\\n<details>\\n  <summary>Why I\'m using a JSON file instead of a simple text file. Click here for the answer:</summary>\\n\\n  It is because in the next article I will define more advanced bookmarks with different properties used by new features \ud83d\ude01\\n</details>\\n\\n### 2. List the bookmarks\\n\\nHere is where fzf comes up, by piping the bookmarks to fzf, they will be output them as an interactive list.\\n\\n`cat $bookmarksFile | jq -r \'.[]\' | fzf`\\n\\n### 3. Once a bookmark is selected, navigate to it\\n\\n`fzf` returns the path selected, we save it to a variable.\\n\\n`local pathSelected=$(cat $bookmarksFile | jq -r \'.[]\' | fzf)`\\n\\nWe check if it is not empty (`-n`) before moving into:\\n\\n```bash\\nif [[ -n \\"$pathSelected\\" ]]; then\\n    cd $pathSelected\\nelse\\n    echo \\"no bookmark selected\\"\\nfi\\n```\\n## Bonus: execute this every time you open a terminal\\nYou have to add this in your bash or zsh profile (_.bashrc_, _.zshrc_ ). Just append the `listBookmarks` implementation at the end, update the `bookmarksFile` variable to be a full path, and call the function.\\n\\n```bash\\nlistBookmarks() {\\n    local bookmarksFile=\'YOUR_PATH/bookmarks.json\'\\n    local pathSelected=$(cat $bookmarksFile |\\n        jq -r \'.[]\' |\\n        fzf)\\n\\n    if [[ -n \\"$pathSelected\\" ]]; then\\n        cd $pathSelected\\n    else\\n        echo \\"no bookmark selected\\"\\n    fi\\n}\\n\\nlistBookmarks\\n```\\n\\nAnd that is all! I hope this saves you some time using the terminal. Do you find this useful? Do you have similar functions? Let me know in the comments below.\\n\\n<Gif id=\\"xUPOqo6E1XvWXwlCyQ\\"  />\\n\\n<AboutMe/>\\n\\n<ShareDocusaurus \\n  slug=\\"posts/bash/1-interactive-bookmarks\\" \\n  title=\\"Create an interactive bookmarks menu in your terminal\\"\\n  tags={[\\"linux\\", \\"productivity\\", \\"hack\\", \\"zsh\\", \\"bash\\", \\"terminal\\"]} />\\n\\n<Comments />"},{"id":"ps-profile-productive","metadata":{"permalink":"/blog/ps-profile-productive","editUrl":"https://github.com/cangulo/cangulo.github.io/blob/main/blog/posts/powershell/configuring-powershell-profile/configuring-powershell-profile.mdx","source":"@site/blog/posts/powershell/configuring-powershell-profile/configuring-powershell-profile.mdx","title":"How to use the PowerShell Profile to be more productive","description":"In this post, I will explain how to set up shortcuts in the PowerShell Profile. Everything in this article works for PowerShell 5.1 and later.","date":"2020-08-24T00:00:00.000Z","formattedDate":"August 24, 2020","tags":[{"label":"windows10","permalink":"/blog/tags/windows-10"},{"label":"productivity","permalink":"/blog/tags/productivity"},{"label":"hack","permalink":"/blog/tags/hack"},{"label":"powershell","permalink":"/blog/tags/powershell"}],"readingTime":3.01,"truncated":true,"authors":[{"name":"Carlos Angulo Mascarell","title":"Software Engineer","url":"https://github.com/cangulo","imageURL":"https://github.com/cangulo/cangulo/raw/main/profile_picture_preview_icon.png","key":"cangulo"}],"prevItem":{"title":"Create an interactive bookmarks menu in your terminal","permalink":"/blog/bash/1-interactive-bookmarks"}},"content":"import { CaptionDocusaurus, ShareDocusaurus } from \'@cangulo-blog/components\'\\nimport Comments from \'/src/components/blog/comments.js\'\\nimport AboutMe from \'@cangulo-blog/components/dist/mdx/aboutme_area.mdx\'\\n\\nIn this post, I will explain how to set up shortcuts in the PowerShell Profile. Everything in this article works for PowerShell 5.1 and later.\\n\\n\x3c!--truncate--\x3e\\n\\n\\nIf you are a PowerShell (a.k.a. PS) user, I\'m sure at some point you repeat operations as navigating to a specific folder (e.g. your local GitHub repository). Maybe you run a script to clean or prepare your environment. Let\'s define those two scenarios as next:\\n\\n1. Go to your local git repository folder.\\n   - Code to execute: `cd .\\\\source\\\\repos\\\\`\\n2. Execute a script.\\n   - Code to execute: `$HOME\\\\source\\\\repos\\\\TaskManager\\\\startTaskManagerScript.ps1`\\n\\n## What is the PS Profile?\\n\\nThe PS Profile is a script that is run when the console starts, setting custom user settings as variables, aliases or functions. We can also use it to execute custom commands to prepare our local environment. Check your `$Profile` variable to know where your profile is stored.\\n\\n![Profile variables](./2020-08-26-configuring-powershell-profile/Profile-variable.png)\\n\\n## Shortcuts\\n\\nThe shortcuts we are going to set are functions or aliases depending on the following situations:\\n\\n1. For a command with static parameters, we will write functions. For example, `goToRepos` as a shortcut for `cd $HOME\\\\source\\\\repos`. The code will be:\\n\\n`function NAME { COMMAND_WITH_PARAMS }` -> `function goToRepos { cd $HOME\\\\source\\\\repos }`\\n\\n2. We will define an alias for frequently used commands which we call with different parameters. For example, we use `Select-String` to filter file content as next:\\n\\n```powershell\\nSelect-String [-Pattern] PATTERN [-Path] PATH\\n```\\n\\n![](ss-executed.png)\\n\\nInstead of writing `Select-String`, we could write `ss`. Next is the alias:\\n\\n`New-Alias -Name ALIAS -Value COMMAND` -> `New-Alias -Name ss -Value Select-String`\\n\\nIn our case, we want to avoid typing the full _startTaskManagerScript_, so we set that path as COMMAND.\\n\\n`New-Alias -Name startTaskManagerAPI -Value $HOME\\\\source\\\\repos\\\\TaskManager\\\\startTaskManagerScript.ps1`\\n\\n### Creating the profile\\n\\nLet\'s create and open the PS profile, execute the following command in PS: `code $PROFILE`, you should see the code editor empty. Considering that both commands share the `$HOME\\\\source\\\\repos` path, we could define a variable to short them as next:\\n\\n```powershell\\n# Variables\\n\\n$localRepo = $HOME + \'\\\\source\\\\repos\'\\n\\n# Functions\\n\\nfunction goToRepos { cd $localRepo }\\n\\n# Alias\\n\\nNew-Alias -Name startTaskManagerAPI -Value $localRepo\\\\TaskManager\\\\startTaskManagerScript.ps1\\n```\\n\\nPlease note the `$localrepo` variable will be available during the PS session. This means you can use it anytime, just as the variable `$HOME`. Paste the previous code into your profile and save it.\\n\\nOpen a new PS window. Maybe the next error will show up:\\n\\n![Problem Signature Profile](./2020-08-26-configuring-powershell-profile/digitally-signed-problem.png)\\n\\nThat is because PS has an execution policy that only accepts signed scripts (`AllSigned`). We need to change it to `RemoteSigned` to verify the signature for remote scripts, but not locals. We have to do it using the following command:\\n\\n`Set-ExecutionPolicy RemoteSigned -Scope CurrentUser`. Now we are good to go, open a new PS and try to execute the shortcuts we defined. \\n\\n\\n![Shortcuts execution](./2020-08-26-configuring-powershell-profile/shortcuts-execution.png)\\n\\n:::tip use the autocomplete feature!\\nYou don\'t need to write your aliases or functions completely. Just type the initial part and press `tab`.\\n:::\\n\\nAnd we\'re done! I hope this helps you to save time when using PS. Do you know any other tweak to be more productive? Feel free to share it in the comments!\\n\\n\\n## References\\n\\n* [PowerShell Profiles Reference for PS 5.1](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-5.1)\\n* [Profiles Files in PS 5.1](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-5.1#the-profile-files)\\n* [Example 4: Create an alias to an executable file](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-5.1#example-4--create-an-alias-to-an-executable-file)\\n* [Example 5: Create an alias for a command with parameters](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-5.1#example-4--create-an-alias-to-an-executable-file)\\n* [How to sign PowerShell profile w/ self-signed certificate?](https://www.tenforums.com/general-support/107659-how-sign-powershell-profile-w-self-signed-certificate.html)\\n* [Signing PowerShell Scripts](https://www.hanselman.com/blog/SigningPowerShellScripts.aspx)\\n\\n\\n<AboutMe/>\\n\\n<ShareDocusaurus \\n  slug=\\"posts/ps-profile-productive\\" \\n  title=\\"How to use the PowerShell Profile to be more productive\\" \\n  tags={[\\"windows10\\",\\"productivity\\",\\"hack\\",\\"powershell\\"]} />\\n\\n<Comments />"}]}')}}]);